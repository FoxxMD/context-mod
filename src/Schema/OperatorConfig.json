{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AuthorCriteria": {
            "additionalProperties": false,
            "description": "Criteria with which to test against the author of an Activity. The outcome of the test is based on:\n\n1. All present properties passing and\n2. If a property is a list then any value from the list matching",
            "examples": [
                {
                    "flairText": [
                        "Contributor",
                        "Veteran"
                    ],
                    "isMod": true,
                    "name": [
                        "FoxxMD",
                        "AnotherUser"
                    ]
                }
            ],
            "minProperties": 1,
            "properties": {
                "age": {
                    "description": "Test the age of the Author's account (when it was created) against this comparison\n\nThe syntax is `(< OR > OR <= OR >=) <number> <unit>`\n\n* EX `> 100 days` => Passes if Author's account is older than 100 days\n* EX `<= 2 months` => Passes if Author's account is younger than or equal to 2 months\n\nUnit must be one of [DayJS Duration units](https://day.js.org/docs/en/durations/creating)\n\n[See] https://regexr.com/609n8 for example",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(days?|weeks?|months?|years?|hours?|minutes?|seconds?|milliseconds?)\\s*$",
                    "type": "string"
                },
                "commentKarma": {
                    "description": "A string containing a comparison operator and a value to compare karma against\n\nThe syntax is `(< OR > OR <= OR >=) <number>[percent sign]`\n\n* EX `> 100`  => greater than 100 comment karma\n* EX `<= 75%` => comment karma is less than or equal to 75% of **all karma**",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "description": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "An (array of) string/regular expression to test contents of an Author's profile description against\n\nIf no flags are specified then the **insensitive** flag is used by default\n\nIf using an array then if **any** value in the array passes the description test passes",
                    "examples": [
                        [
                            "/test$/i",
                            "look for this string literal"
                        ]
                    ]
                },
                "flairCssClass": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A (user) flair css class (or list of) from the subreddit to match against",
                    "examples": [
                        "red"
                    ]
                },
                "flairTemplate": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A (user) flair template id (or list of) from the subreddit to match against"
                },
                "flairText": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A (user) flair text value (or list of) from the subreddit to match against",
                    "examples": [
                        "Approved"
                    ]
                },
                "isMod": {
                    "description": "Is the author a moderator?",
                    "type": "boolean"
                },
                "linkKarma": {
                    "description": "A string containing a comparison operator and a value to compare link karma against\n\nThe syntax is `(< OR > OR <= OR >=) <number>[percent sign]`\n\n* EX `> 100`  => greater than 100 link karma\n* EX `<= 75%` => link karma is less than or equal to 75% of **all karma**",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "name": {
                    "description": "A list of reddit usernames (case-insensitive) to match against. Do not include the \"u/\" prefix\n\n EX to match against /u/FoxxMD and /u/AnotherUser use [\"FoxxMD\",\"AnotherUser\"]",
                    "examples": [
                        "FoxxMD",
                        "AnotherUser"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "shadowBanned": {
                    "description": "Is the author shadowbanned?\n\nThis is determined by trying to retrieve the author's profile. If a 404 is returned it is likely they are shadowbanned",
                    "type": "boolean"
                },
                "totalKarma": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 100`  => greater than 100",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "userNotes": {
                    "description": "A list of UserNote properties to check against the User Notes attached to this Author in this Subreddit (must have Toolbox enabled and used User Notes at least once)",
                    "items": {
                        "$ref": "#/definitions/UserNoteCriteria"
                    },
                    "type": "array"
                },
                "verified": {
                    "description": "Does Author's account have a verified email?",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AuthorOptions": {
            "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
            "examples": [
                {
                    "include": [
                        {
                            "flairText": [
                                "Contributor",
                                "Veteran"
                            ]
                        },
                        {
                            "isMod": true
                        }
                    ]
                }
            ],
            "properties": {
                "exclude": {
                    "description": "Only runs if `include` is not present. Each AuthorCriteria is comprised of conditions that the Author being checked must \"not\" pass. See excludeCondition for set behavior\n\nEX: `isMod: true, name: Automoderator` => Will pass if the Author IS NOT a mod and IS NOT named Automoderator",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                },
                "excludeCondition": {
                    "default": "OR",
                    "description": "* OR => if ANY exclude condition \"does not\" pass then the exclude test passes\n* AND => if ALL exclude conditions \"do not\" pass then the exclude test passes\n\nDefaults to OR",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "type": "string"
                },
                "include": {
                    "description": "Will \"pass\" if any set of AuthorCriteria passes",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BotConnection": {
            "description": "Configuration required to connect to a CM Server",
            "properties": {
                "host": {
                    "description": "The hostname and port the CM Server is listening on EX `localhost:8085`",
                    "type": "string"
                },
                "secret": {
                    "description": "The **shared secret** used to sign API calls from the Client to the Server.\n\nThis value should be the same as what is specified in the target CM's `api.secret` configuration",
                    "type": "string"
                }
            },
            "required": [
                "host",
                "secret"
            ],
            "type": "object"
        },
        "BotCredentialsJsonConfig": {
            "properties": {
                "reddit": {
                    "$ref": "#/definitions/RedditCredentials"
                },
                "youtube": {
                    "properties": {
                        "apiKey": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "apiKey"
                    ],
                    "type": "object"
                }
            },
            "required": [
                "reddit"
            ],
            "type": "object"
        },
        "BotInstanceJsonConfig": {
            "description": "The configuration for an **individual reddit account** ContextMod will run as a bot.\n\nMultiple bot configs may be specified (one per reddit account).\n\n**NOTE:** If `bots` is not specified in a `FILE` then a default `bot` is generated using `ENV/ARG` values IE `CLIENT_ID`, etc...but if `bots` IS specified the default is not generated.",
            "properties": {
                "caching": {
                    "$ref": "#/definitions/OperatorCacheConfig",
                    "description": "Settings to configure the default caching behavior for this bot\n\nEvery setting not specified will default to what is specified by the global operator caching config"
                },
                "credentials": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RedditCredentials"
                        },
                        {
                            "$ref": "#/definitions/BotCredentialsJsonConfig"
                        }
                    ]
                },
                "filterCriteriaDefaults": {
                    "$ref": "#/definitions/FilterCriteriaDefaults",
                    "description": "Define the default behavior for all filter criteria on all checks in all subreddits\n\nDefaults to exclude mods and automoderator from checks"
                },
                "flowControlDefaults": {
                    "properties": {
                        "maxGotoDepth": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "nanny": {
                    "description": "Settings related to managing heavy API usage.",
                    "properties": {
                        "hardLimit": {
                            "default": 50,
                            "description": "When `api limit remaining` reaches this number the application will pause all event polling until the api limit is reset.",
                            "examples": [
                                50
                            ],
                            "type": "number"
                        },
                        "softLimit": {
                            "default": 250,
                            "description": "When `api limit remaining` reaches this number the application will attempt to put heavy-usage subreddits in a **slow mode** where activity processed is slowed to one every 1.5 seconds until the api limit is reset.",
                            "examples": [
                                250
                            ],
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "notifications": {
                    "$ref": "#/definitions/NotificationConfig",
                    "description": "Settings to configure 3rd party notifications for when behavior occurs"
                },
                "polling": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/PollingDefaults"
                        },
                        {
                            "properties": {
                                "shared": {
                                    "anyOf": [
                                        {
                                            "items": {
                                                "enum": [
                                                    "modqueue",
                                                    "newComm",
                                                    "newSub",
                                                    "unmoderated"
                                                ],
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        {
                                            "enum": [
                                                true
                                            ],
                                            "type": "boolean"
                                        }
                                    ],
                                    "description": "Set which polling sources should be shared among subreddits using default polling settings for that source\n\n* For `unmoderated and `modqueue` the bot will poll on **r/mod** for new activities\n* For `newSub` and `newComm` all subreddits sharing the source will be combined to poll like **r/subreddit1+subreddit2/new**\n\nIf set to `true` all polling sources will be shared,  otherwise specify which sourcs should be shared as a list"
                                },
                                "sharedMod": {
                                    "default": false,
                                    "description": "DEPRECATED: See `shared`\n\n Using the ENV or ARG will sett `unmoderated` and `modqueue` on `shared`\n\n* ENV => `SHARE_MOD`\n* ARG => `--shareMod`",
                                    "type": "boolean"
                                },
                                "stagger": {
                                    "description": "If sharing a stream staggers pushing relevant Activities to individual subreddits.\n\nUseful when running many subreddits and rules are potentially cpu/memory/traffic heavy -- allows spreading out load",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "description": "Settings related to default polling configurations for subreddits"
                },
                "postCheckBehaviorDefaults": {
                    "$ref": "#/definitions/PostBehavior"
                },
                "queue": {
                    "description": "Settings related to default configurations for queue behavior for subreddits",
                    "properties": {
                        "maxWorkers": {
                            "default": 1,
                            "description": "Set the number of maximum concurrent workers any subreddit can use.\n\nSubreddits may define their own number of max workers in their config but the application will never allow any subreddit's max workers to be larger than the operator\n\nNOTE: Do not increase this unless you are certain you know what you are doing! The default is suitable for the majority of use cases.",
                            "examples": [
                                1
                            ],
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "snoowrap": {
                    "$ref": "#/definitions/SnoowrapOptions",
                    "description": "Settings to control some [Snoowrap](https://github.com/not-an-aardvark/snoowrap) behavior.\n\nOverrides any defaults provided at top-level operator config.\n\nSet to an empty object to \"ignore\" any top-level config"
                },
                "subreddits": {
                    "description": "Settings related to bot behavior for subreddits it is managing",
                    "properties": {
                        "dryRun": {
                            "default": false,
                            "description": "If `true` then all subreddits will run in dry run mode, overriding configurations\n\n* ENV => `DRYRUN`\n* ARG => `--dryRun`",
                            "examples": [
                                false
                            ],
                            "type": "boolean"
                        },
                        "exclude": {
                            "description": "Names of subreddits the bot should NOT run, based on what subreddits it moderates\n\nThis setting is ignored if `names` is specified",
                            "examples": [
                                [
                                    "mealtimevideos",
                                    "programminghumor"
                                ]
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "heartbeatInterval": {
                            "default": 300,
                            "description": "Interval, in seconds, to perform application heartbeat\n\nOn heartbeat the application does several things:\n\n* Log output with current api rate remaining and other statistics\n* Tries to retrieve and parse configurations for any subreddits with invalid configuration state\n* Restarts any bots stopped/paused due to polling issues, general errors, or invalid configs (if new config is valid)\n\n* ENV => `HEARTBEAT`\n* ARG => `--heartbeat <sec>`",
                            "examples": [
                                300
                            ],
                            "type": "number"
                        },
                        "names": {
                            "description": "Names of subreddits for bot to run on\n\nIf not present or `null` bot will run on all subreddits it is a moderator of\n\n* ENV => `SUBREDDITS` (comma-separated)\n* ARG => `--subreddits <list...>`",
                            "examples": [
                                [
                                    "mealtimevideos",
                                    "programminghumor"
                                ]
                            ],
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "overrides": {
                            "items": {
                                "$ref": "#/definitions/SubredditOverrides"
                            },
                            "type": "array"
                        },
                        "wikiConfig": {
                            "default": "botconfig/contextbot",
                            "description": "The default relative url to the ContextMod wiki page EX `https://reddit.com/r/subreddit/wiki/<path>`\n\n* ENV => `WIKI_CONFIG`\n* ARG => `--wikiConfig <path>`",
                            "examples": [
                                "botconfig/contextbot"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "CacheOptions": {
            "additionalProperties": {},
            "description": "Configure granular settings for a cache provider with this object",
            "properties": {
                "auth_pass": {
                    "description": "(`redis`) the authentication passphrase (if enabled)",
                    "type": "string"
                },
                "db": {
                    "default": 0,
                    "description": "(`redis`) the db number to use",
                    "examples": [
                        0
                    ],
                    "type": "number"
                },
                "host": {
                    "default": "localhost",
                    "description": "(`redis`) hostname",
                    "examples": [
                        "localhost"
                    ],
                    "type": "string"
                },
                "max": {
                    "default": 500,
                    "description": "(`memory`) The maximum number of keys (unique cache calls) to store in cache\n\nWhen the maximum number of keys is reached the cache will being dropping the [least-recently-used](https://github.com/isaacs/node-lru-cache) key to keep the cache at `max` size.\n\nThis will determine roughly how large in **RAM** each `memory` cache can be, based on how large your `window` criteria are. Consider this example:\n\n* all `window` criteria in a subreddit's rules are `\"window\": 100`\n* `\"max\": 500`\n* Maximum size of **each** memory cache will be `500 x 100 activities = 50,000 activities`\n  * So the shared cache would be max 50k activities and\n  * Every additional private cache (when a subreddit configures their cache separately) will also be max 50k activities",
                    "examples": [
                        500
                    ],
                    "type": "number"
                },
                "port": {
                    "default": 6379,
                    "description": "(`redis`) port to connect on",
                    "examples": [
                        6379
                    ],
                    "type": "number"
                },
                "store": {
                    "$ref": "#/definitions/CacheProvider"
                },
                "ttl": {
                    "default": 60,
                    "description": "The default TTL, in seconds, for the cache provider.\n\nCan mostly be ignored since TTLs are defined for each cache object",
                    "examples": [
                        60
                    ],
                    "type": "number"
                }
            },
            "required": [
                "store"
            ],
            "type": "object"
        },
        "CacheProvider": {
            "description": "Available cache providers",
            "enum": [
                "memory",
                "none",
                "redis"
            ],
            "type": "string"
        },
        "CommentState": {
            "description": "Different attributes a `Comment` can be in. Only include a property if you want to check it.",
            "examples": [
                {
                    "op": true,
                    "removed": false
                }
            ],
            "properties": {
                "age": {
                    "description": "A duration and how to compare it against a value\n\nThe syntax is `(< OR > OR <= OR >=) <number> <unit>` EX `> 100 days`, `<= 2 months`\n\n* EX `> 100 days` => Passes if the date being compared is before 100 days ago\n* EX `<= 2 months` => Passes if the date being compared is after or equal to 2 months\n\nUnit must be one of [DayJS Duration units](https://day.js.org/docs/en/durations/creating)\n\n[See] https://regexr.com/609n8 for example",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(days|weeks|months|years|hours|minutes|seconds|milliseconds)\\s*$",
                    "type": "string"
                },
                "approved": {
                    "type": "boolean"
                },
                "deleted": {
                    "type": "boolean"
                },
                "depth": {
                    "description": "The (nested) level of a comment.\n\n* 0 mean the comment is at top-level (replying to submission)\n* non-zero, Nth value means the comment has N parent comments",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(days|weeks|months|years|hours|minutes|seconds|milliseconds)\\s*$",
                    "type": "string"
                },
                "distinguished": {
                    "type": "boolean"
                },
                "filtered": {
                    "type": "boolean"
                },
                "locked": {
                    "type": "boolean"
                },
                "op": {
                    "description": "Is this Comment Author also the Author of the Submission this comment is in?",
                    "type": "boolean"
                },
                "removed": {
                    "type": "boolean"
                },
                "reports": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 2`  => greater than 2 total reports\n\nDefaults to TOTAL reports on an Activity. Suffix the value with the report type to check that type:\n\n* EX `> 3 mod` => greater than 3 mod reports\n* EX `>= 1 user` => greater than 1 user report",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "score": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 100`  => greater than 100",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "spam": {
                    "type": "boolean"
                },
                "stickied": {
                    "type": "boolean"
                },
                "submissionState": {
                    "description": "A list of SubmissionState attributes to test the Submission this comment is in",
                    "items": {
                        "$ref": "#/definitions/SubmissionState"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DiscordProviderConfig": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "discord"
                    ],
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type",
                "url"
            ],
            "type": "object"
        },
        "FilterCriteriaDefaults": {
            "properties": {
                "authorIs": {
                    "$ref": "#/definitions/AuthorOptions",
                    "description": "Determine how authorIs defaults behave when authorIs is present on the check\n\n* merge => merges defaults with check's authorIs\n* replace => check authorIs will replace defaults (no defaults used)",
                    "examples": [
                        {
                            "include": [
                                {
                                    "flairText": [
                                        "Contributor",
                                        "Veteran"
                                    ]
                                },
                                {
                                    "isMod": true
                                }
                            ]
                        }
                    ]
                },
                "authorIsBehavior": {
                    "enum": [
                        "merge",
                        "replace"
                    ],
                    "type": "string"
                },
                "itemIs": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/SubmissionState"
                            },
                            {
                                "$ref": "#/definitions/CommentState"
                            }
                        ]
                    },
                    "type": "array"
                },
                "itemIsBehavior": {
                    "description": "Determine how itemIs defaults behave when itemIs is present on the check\n\n* merge => adds defaults to check's itemIs\n* replace => check itemIs will replace defaults (no defaults used)",
                    "enum": [
                        "merge",
                        "replace"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LoggingOptions": {
            "properties": {
                "console": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pick<Transports.ConsoleTransportOptions,\"silent\"|\"eol\"|\"stderrLevels\"|\"consoleWarnLevels\">"
                        },
                        {
                            "properties": {
                                "level": {
                                    "enum": [
                                        "debug",
                                        "error",
                                        "info",
                                        "verbose",
                                        "warn"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "description": "Options for logging to console"
                },
                "file": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Omit<DailyRotateFileTransportOptions,\"stream\"|\"dirname\"|\"options\"|\"handleRejections\"|\"format\"|\"handleExceptions\"|\"log\"|\"logv\"|\"close\">"
                        },
                        {
                            "properties": {
                                "dirname": {
                                    "description": "The absolute path to a directory where rotating log files should be stored.\n\n* If not present or `null` or `false` no log files will be created\n* If `true` logs will be stored at `[working directory]/logs`\n\n* ENV => `LOG_DIR`\n* ARG => `--logDir [dir]`",
                                    "examples": [
                                        "/var/log/contextmod"
                                    ],
                                    "type": [
                                        "null",
                                        "string",
                                        "boolean"
                                    ]
                                },
                                "level": {
                                    "enum": [
                                        "debug",
                                        "error",
                                        "info",
                                        "verbose",
                                        "warn"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "description": "Options for Rotating File logging"
                },
                "level": {
                    "default": "verbose",
                    "description": "The minimum log level to output. The log level set will output logs at its level **and all levels above it:**\n\n * `error`\n * `warn`\n * `info`\n * `verbose`\n * `debug`\n\n Note: `verbose` will display *a lot* of information on the status/result of run rules/checks/actions etc. which is very useful for testing configurations. Once your bot is stable changing the level to `info` will reduce log noise.\n\n * ENV => `LOG_LEVEL`\n * ARG => `--logLevel <level>`",
                    "enum": [
                        "debug",
                        "error",
                        "info",
                        "verbose",
                        "warn"
                    ],
                    "examples": [
                        "verbose"
                    ],
                    "type": "string"
                },
                "path": {
                    "description": "**DEPRECATED** - Use `file.dirname` instead\nThe absolute path to a directory where rotating log files should be stored.\n\n* If not present or `null` or `false` no log files will be created\n* If `true` logs will be stored at `[working directory]/logs`\n\n* ENV => `LOG_DIR`\n* ARG => `--logDir [dir]`",
                    "examples": [
                        "/var/log/contextmod"
                    ],
                    "type": [
                        "null",
                        "string",
                        "boolean"
                    ]
                },
                "stream": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/Omit<DuplexTransportOptions,\"name\"|\"stream\"|\"handleRejections\"|\"format\"|\"handleExceptions\"|\"log\"|\"logv\"|\"close\">"
                        },
                        {
                            "properties": {
                                "level": {
                                    "enum": [
                                        "debug",
                                        "error",
                                        "info",
                                        "verbose",
                                        "warn"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "description": "Options for logging to api/web"
                }
            },
            "type": "object"
        },
        "NotificationConfig": {
            "properties": {
                "events": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/NotificationEventConfig"
                            },
                            {
                                "items": {
                                    "enum": [
                                        "configUpdated",
                                        "eventActioned",
                                        "pollingError",
                                        "runStateChanged"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "type": "array"
                },
                "providers": {
                    "description": "A list of notification providers (Discord, etc..) to configure. Each object in the list is one provider. Multiple of the same provider can be provided but must have different names",
                    "items": {
                        "$ref": "#/definitions/DiscordProviderConfig"
                    },
                    "type": "array"
                }
            },
            "required": [
                "events",
                "providers"
            ],
            "type": "object"
        },
        "NotificationEventConfig": {
            "properties": {
                "providers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "types": {
                    "items": {
                        "enum": [
                            "configUpdated",
                            "eventActioned",
                            "pollingError",
                            "runStateChanged"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "providers",
                "types"
            ],
            "type": "object"
        },
        "Omit<DailyRotateFileTransportOptions,\"stream\"|\"dirname\"|\"options\"|\"handleRejections\"|\"format\"|\"handleExceptions\"|\"log\"|\"logv\"|\"close\">": {
            "properties": {
                "auditFile": {
                    "description": "A string representing the name of the name of the audit file. (default: './hash-audit.json')",
                    "type": "string"
                },
                "createSymlink": {
                    "description": "Create a tailable symlink to the current active log file. (default: false)",
                    "type": "boolean"
                },
                "datePattern": {
                    "description": "A string representing the moment.js date format to be used for rotating. The meta characters used in this string will dictate the frequency of the file rotation. For example, if your datePattern is simply 'HH' you will end up with 24 log files that are picked up and appended to every day. (default 'YYYY-MM-DD')",
                    "type": "string"
                },
                "eol": {
                    "type": "string"
                },
                "extension": {
                    "description": "A string representing an extension to be added to the filename, if not included in the filename property. (default: '')",
                    "type": "string"
                },
                "filename": {
                    "description": "Filename to be used to log to. This filename can include the %DATE% placeholder which will include the formatted datePattern at that point in the filename. (default: 'winston.log.%DATE%)",
                    "type": "string"
                },
                "frequency": {
                    "description": "A string representing the frequency of rotation. (default: 'custom')",
                    "type": "string"
                },
                "json": {
                    "type": "boolean"
                },
                "level": {
                    "type": "string"
                },
                "maxFiles": {
                    "description": "Maximum number of logs to keep. If not set, no logs will be removed. This can be a number of files or number of days. If using days, add 'd' as the suffix. (default: null)",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "maxSize": {
                    "description": "Maximum size of the file after which it will rotate. This can be a number of bytes, or units of kb, mb, and gb. If using the units, add 'k', 'm', or 'g' as the suffix. The units need to directly follow the number. (default: null)",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "silent": {
                    "type": "boolean"
                },
                "symlinkName": {
                    "description": "The name of the tailable symlink. (default: 'current.log')",
                    "type": "string"
                },
                "utc": {
                    "description": "A boolean whether or not to generate file name from \"datePattern\" in UTC format. (default: false)",
                    "type": "boolean"
                },
                "zippedArchive": {
                    "description": "A boolean to define whether or not to gzip archived log files. (default 'false')",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Omit<DuplexTransportOptions,\"name\"|\"stream\"|\"handleRejections\"|\"format\"|\"handleExceptions\"|\"log\"|\"logv\"|\"close\">": {
            "properties": {
                "dump": {
                    "type": "boolean"
                },
                "eol": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "silent": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "OperatorCacheConfig": {
            "properties": {
                "actionedEventsDefault": {
                    "default": 25,
                    "description": "The **default** number of Events that the cache will store triggered result summaries for\n\nThese summaries are viewable through the Web UI.\n\nThe value specified cannot be larger than `actionedEventsMax` for the global/bot config (if set)",
                    "type": "number"
                },
                "actionedEventsMax": {
                    "default": 25,
                    "description": "The **maximum** number of Events that the cache should store triggered result summaries for\n\nThese summaries are viewable through the Web UI.\n\nThe value specified by a subreddit cannot be larger than the value set by the Operator for the global/bot config (if set)",
                    "type": "number"
                },
                "authorTTL": {
                    "default": 60,
                    "description": "Amount of time, in seconds, author activity history (Comments/Submission) should be cached\n\n* If `0` or `true` will cache indefinitely (not recommended)\n* If `false` will not cache\n\n* ENV => `AUTHOR_TTL`\n* ARG => `--authorTTL <sec>`",
                    "examples": [
                        60
                    ],
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "commentTTL": {
                    "default": 60,
                    "description": "Amount of time, in seconds, a comment should be cached\n\n* If `0` or `true` will cache indefinitely (not recommended)\n* If `false` will not cache",
                    "examples": [
                        60
                    ],
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "filterCriteriaTTL": {
                    "default": 60,
                    "description": "Amount of time, in seconds, to cache filter criteria results (`authorIs` and `itemIs` results)\n\nThis is especially useful if when polling high-volume comments and your checks rely on author/item filters\n\n* If `0` or `true` will cache indefinitely (not recommended)\n* If `false` will not cache",
                    "examples": [
                        60
                    ],
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "provider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CacheOptions"
                        },
                        {
                            "enum": [
                                "memory",
                                "none",
                                "redis"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "The cache provider and, optionally, a custom configuration for that provider\n\nIf not present or `null` provider will be `memory`.\n\nTo specify another `provider` but use its default configuration set this property to a string of one of the available providers: `memory`, `redis`, or `none`"
                },
                "selfTTL": {
                    "default": 50,
                    "description": "Amount of time, in seconds, an Activity that the bot has acted on or created will be ignored if found during polling\n\nThis is useful to prevent the bot from checking Activities it *just* worked on or a product of the checks. Examples:\n\n* Ignore comments created through an Action\n* Ignore Activity polled from modqueue that the bot just reported\n\nThis value should be at least as long as the longest polling interval for modqueue/newComm\n\n* If `0` or `true` will cache indefinitely (not recommended)\n* If `false` will not cache",
                    "examples": [
                        50
                    ],
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "submissionTTL": {
                    "default": 60,
                    "description": "Amount of time, in seconds, a submission should be cached\n\n* If `0` or `true` will cache indefinitely (not recommended)\n* If `false` will not cache",
                    "examples": [
                        60
                    ],
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "subredditTTL": {
                    "default": 600,
                    "description": "Amount of time, in seconds, a subreddit (attributes) should be cached\n\n* If `0` or `true` will cache indefinitely (not recommended)\n* If `false` will not cache",
                    "examples": [
                        600
                    ],
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "userNotesTTL": {
                    "default": 300,
                    "description": "Amount of time, in seconds, [Toolbox User Notes](https://www.reddit.com/r/toolbox/wiki/docs/usernotes) should be cached\n\n* If `0` or `true` will cache indefinitely (not recommended)\n* If `false` will not cache",
                    "examples": [
                        300
                    ],
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "wikiTTL": {
                    "default": 300,
                    "description": "Amount of time, in seconds, wiki content pages should be cached\n\n* If `0` or `true` will cache indefinitely (not recommended)\n* If `false` will not cache",
                    "examples": [
                        300
                    ],
                    "type": [
                        "number",
                        "boolean"
                    ]
                }
            },
            "type": "object"
        },
        "Pick<Transports.ConsoleTransportOptions,\"silent\"|\"eol\"|\"stderrLevels\"|\"consoleWarnLevels\">": {
            "properties": {
                "consoleWarnLevels": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "eol": {
                    "type": "string"
                },
                "silent": {
                    "type": "boolean"
                },
                "stderrLevels": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "PollingDefaults": {
            "properties": {
                "delayUntil": {
                    "description": "Delay processing Activity until it is `N` seconds old\n\nUseful if there are other bots that may process an Activity and you want this bot to run first/last/etc.\n\nIf the Activity is already `N` seconds old when it is initially retrieved no refresh of the Activity occurs (no API request is made) and it is immediately processed.",
                    "type": "number"
                },
                "interval": {
                    "default": 30,
                    "description": "Amount of time, in seconds, to wait between requests",
                    "examples": [
                        30
                    ],
                    "type": "number"
                },
                "limit": {
                    "default": 50,
                    "description": "The maximum number of Activities to get on every request",
                    "examples": [
                        50
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "PostBehavior": {
            "properties": {
                "postFail": {
                    "default": "next",
                    "description": "Do this behavior if a Check is NOT triggered",
                    "type": "string"
                },
                "postTrigger": {
                    "default": "nextRun",
                    "description": "Do this behavior if a Check is triggered",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RedditCredentials": {
            "description": "Credentials required for the bot to interact with Reddit's API\n\nThese credentials will provided to both the API and Web interface unless otherwise specified with the `web.credentials` property\n\nRefer to the [required credentials table](https://github.com/FoxxMD/context-mod/blob/master/docs/operatorConfiguration.md#minimum-required-configuration) to see what is necessary to run the bot.",
            "examples": [
                {
                    "accessToken": "p75_1c467b2",
                    "clientId": "f4b4df1_9oiu",
                    "clientSecret": "34v5q1c564_yt7",
                    "redirectUri": "http://localhost:8085/callback",
                    "refreshToken": "34_f1w1v4"
                }
            ],
            "properties": {
                "accessToken": {
                    "description": "Access token retrieved from authenticating an account with your Reddit Application\n\n* ENV => `ACCESS_TOKEN`\n* ARG => `--accessToken <token>`",
                    "examples": [
                        "p75_1c467b2"
                    ],
                    "type": "string"
                },
                "clientId": {
                    "description": "Client ID for your Reddit application\n\n* ENV => `CLIENT_ID`\n* ARG => `--clientId <id>`",
                    "examples": [
                        "f4b4df1c7b2"
                    ],
                    "type": "string"
                },
                "clientSecret": {
                    "description": "Client Secret for your Reddit application\n\n* ENV => `CLIENT_SECRET`\n* ARG => `--clientSecret <id>`",
                    "examples": [
                        "34v5q1c56ub"
                    ],
                    "type": "string"
                },
                "refreshToken": {
                    "description": "Refresh token retrieved from authenticating an account with your Reddit Application\n\n* ENV => `REFRESH_TOKEN`\n* ARG => `--refreshToken <token>`",
                    "examples": [
                        "34_f1w1v4"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SnoowrapOptions": {
            "properties": {
                "debug": {
                    "description": "Manually set the debug status for snoowrap\n\nWhen snoowrap has `debug: true` it will log the http status response of reddit api requests to at the `debug` level\n\n* Set to `true` to always output\n* Set to `false` to never output\n\nIf not present or `null` will be set based on `logLevel`\n\n* ENV => `SNOO_DEBUG`\n* ARG => `--snooDebug`",
                    "type": "boolean"
                },
                "proxy": {
                    "description": "Proxy all requests to Reddit's API through this endpoint\n\n* ENV => `PROXY`\n* ARG => `--proxy <proxyEndpoint>`",
                    "examples": [
                        "http://localhost:4443"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SubmissionState": {
            "description": "Different attributes a `Submission` can be in. Only include a property if you want to check it.",
            "examples": [
                {
                    "over_18": true,
                    "removed": false
                }
            ],
            "properties": {
                "age": {
                    "description": "A duration and how to compare it against a value\n\nThe syntax is `(< OR > OR <= OR >=) <number> <unit>` EX `> 100 days`, `<= 2 months`\n\n* EX `> 100 days` => Passes if the date being compared is before 100 days ago\n* EX `<= 2 months` => Passes if the date being compared is after or equal to 2 months\n\nUnit must be one of [DayJS Duration units](https://day.js.org/docs/en/durations/creating)\n\n[See] https://regexr.com/609n8 for example",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(days|weeks|months|years|hours|minutes|seconds|milliseconds)\\s*$",
                    "type": "string"
                },
                "approved": {
                    "type": "boolean"
                },
                "deleted": {
                    "type": "boolean"
                },
                "distinguished": {
                    "type": "boolean"
                },
                "filtered": {
                    "type": "boolean"
                },
                "flairTemplate": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "isRedditMediaDomain": {
                    "description": "Is the submission a reddit-hosted image or video?",
                    "type": "boolean"
                },
                "is_self": {
                    "type": "boolean"
                },
                "link_flair_css_class": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "link_flair_text": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "locked": {
                    "type": "boolean"
                },
                "over_18": {
                    "description": "NSFW",
                    "type": "boolean"
                },
                "pinned": {
                    "type": "boolean"
                },
                "removed": {
                    "type": "boolean"
                },
                "reports": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 2`  => greater than 2 total reports\n\nDefaults to TOTAL reports on an Activity. Suffix the value with the report type to check that type:\n\n* EX `> 3 mod` => greater than 3 mod reports\n* EX `>= 1 user` => greater than 1 user report",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "score": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 100`  => greater than 100",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "spam": {
                    "type": "boolean"
                },
                "spoiler": {
                    "type": "boolean"
                },
                "stickied": {
                    "type": "boolean"
                },
                "title": {
                    "description": "A valid regular expression to match against the title of the submission",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SubredditOverrides": {
            "properties": {
                "flowControlDefaults": {
                    "properties": {
                        "maxGotoDepth": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "ThirdPartyCredentialsJsonConfig": {
            "additionalProperties": {},
            "properties": {
                "youtube": {
                    "properties": {
                        "apiKey": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "apiKey"
                    ],
                    "type": "object"
                }
            },
            "type": "object"
        },
        "UserNoteCriteria": {
            "properties": {
                "count": {
                    "default": ">= 1",
                    "description": "Number of occurrences of this type. Ignored if `search` is `current`\n\nA string containing a comparison operator and/or a value to compare number of occurrences against\n\nThe syntax is `(< OR > OR <= OR >=) <number>[percent sign] [ascending|descending]`",
                    "examples": [
                        ">= 1"
                    ],
                    "pattern": "^\\s*(?<opStr>>|>=|<|<=)\\s*(?<value>\\d+)\\s*(?<percent>%?)\\s*(?<extra>asc.*|desc.*)*$",
                    "type": "string"
                },
                "search": {
                    "default": "current",
                    "description": "How to test the notes for this Author:\n\n### current\n\nOnly the most recent note is checked for `type`\n\n### total\n\nThe `count` comparison of `type` must be found within all notes\n\n* EX `count: > 3`   => Must have more than 3 notes of `type`, total\n* EX `count: <= 25%` => Must have 25% or less of notes of `type`, total\n\n### consecutive\n\nThe `count` **number** of `type` notes must be found in a row.\n\nYou may also specify the time-based order in which to search the notes by specifying `ascending (asc)` or `descending (desc)` in the `count` value. Default is `descending`\n\n* EX `count: >= 3` => Must have 3 or more notes of `type` consecutively, in descending order\n* EX `count: < 2`  => Must have less than 2 notes of `type` consecutively, in descending order\n* EX `count: > 4 asc` => Must have greater than 4 notes of `type` consecutively, in ascending order",
                    "enum": [
                        "consecutive",
                        "current",
                        "total"
                    ],
                    "examples": [
                        "current"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "User Note type key to search for",
                    "examples": [
                        "spamwarn"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "WebCredentials": {
            "description": "Separate credentials for the web interface can be provided when also running the api.\n\nAll properties not specified will default to values given in ENV/ARG credential properties\n\nRefer to the [required credentials table](https://github.com/FoxxMD/context-mod/blob/master/docs/operatorConfiguration.md#minimum-required-configuration) to see what is necessary for the web interface.",
            "examples": [
                {
                    "clientId": "f4b4df1_9oiu",
                    "clientSecret": "34v5q1c564_yt7",
                    "redirectUri": "http://localhost:8085/callback"
                }
            ],
            "properties": {
                "clientId": {
                    "description": "Client ID for your Reddit application",
                    "examples": [
                        "f4b4df1_9oiu"
                    ],
                    "type": "string"
                },
                "clientSecret": {
                    "description": "Client Secret for your Reddit application",
                    "examples": [
                        "34v5q1c564_yt7"
                    ],
                    "type": "string"
                },
                "redirectUri": {
                    "description": "Redirect URI for your Reddit application\n\nUsed for:\n\n* accessing the web interface for monitoring bots\n* authenticating an account to use for a bot instance\n\n* ENV => `REDIRECT_URI`\n* ARG => `--redirectUri <uri>`",
                    "examples": [
                        "http://localhost:8085/callback"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "description": "Configuration for application-level settings IE for running the bot instance\n\n* To load a JSON configuration **from the command line** use the `-c` cli argument EX: `node src/index.js -c /path/to/JSON/config.json`\n* To load a JSON configuration **using an environmental variable** use `OPERATOR_CONFIG` EX: `OPERATOR_CONFIG=/path/to/JSON/config.json`",
    "properties": {
        "api": {
            "description": "Configuration for the **Server** application. See [Architecture Documentation](https://github.com/FoxxMD/context-mod/blob/master/docs/serverClientArchitecture.md) for more info",
            "properties": {
                "friendly": {
                    "description": "A friendly name for this server. This will override `friendly` in `BotConnection` if specified.",
                    "type": "string"
                },
                "port": {
                    "default": 8095,
                    "description": "The port the server listens on for API requests",
                    "examples": [
                        8095
                    ],
                    "type": "number"
                },
                "secret": {
                    "description": "The **shared secret** used to verify API requests come from an authenticated client.\n\nUse this same value for the `secret` value in a `BotConnection` object to connect to this Server",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "bots": {
            "items": {
                "$ref": "#/definitions/BotInstanceJsonConfig"
            },
            "type": "array"
        },
        "caching": {
            "$ref": "#/definitions/OperatorCacheConfig",
            "description": "Settings to configure the default caching behavior globally\n\nThese settings will be used by each bot, and subreddit, that does not specify their own"
        },
        "credentials": {
            "$ref": "#/definitions/ThirdPartyCredentialsJsonConfig"
        },
        "logging": {
            "$ref": "#/definitions/LoggingOptions",
            "description": "Settings to configure global logging defaults"
        },
        "mode": {
            "default": "all",
            "description": "Mode to run ContextMod in\n\n* `all` (default) - Run the api and the web interface\n* `client` - Run web interface only\n* `server` - Run the api/bots only",
            "enum": [
                "all",
                "client",
                "server"
            ],
            "type": "string"
        },
        "notifications": {
            "$ref": "#/definitions/NotificationConfig",
            "description": "Settings to configure 3rd party notifications for when ContextMod behavior occurs"
        },
        "operator": {
            "description": "Settings related to the user(s) running this ContextMod instance and information on the bot",
            "properties": {
                "display": {
                    "description": "A **public** name to display to users of the web interface. Use this to help moderators using your bot identify who is the operator in case they need to contact you.\n\nLeave undefined for no public name to be displayed.\n\n* ENV => `OPERATOR_DISPLAY`\n* ARG => `--operatorDisplay <name>`",
                    "examples": [
                        "Moderators of r/MySubreddit"
                    ],
                    "type": "string"
                },
                "name": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The name, or names, of the Reddit accounts, without prefix, that the operators of this bot uses.\n\nThis is used for showing more information in the web interface IE show all logs/subreddits if even not a moderator.\n\nEX -- User is /u/FoxxMD then `\"name\": [\"FoxxMD\"]`\n\n* ENV => `OPERATOR` (if list, comma-delimited)\n* ARG => `--operator <name...>`",
                    "examples": [
                        [
                            "FoxxMD",
                            "AnotherUser"
                        ]
                    ]
                }
            },
            "type": "object"
        },
        "snoowrap": {
            "$ref": "#/definitions/SnoowrapOptions",
            "description": "Set global snoowrap options as well as default snoowrap config for all bots that don't specify their own"
        },
        "userAgent": {
            "description": "Added to the User-Agent information sent to reddit\n\nThis string will be added BETWEEN version and your bot name.\n\nEX: `myBranch` => `web:contextMod:v1.0.0-myBranch:BOT-/u/MyBotUser`\n\n* ENV => `USER_AGENT`",
            "type": "string"
        },
        "web": {
            "description": "Settings for the web interface",
            "properties": {
                "caching": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CacheOptions"
                        },
                        {
                            "enum": [
                                "memory",
                                "redis"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Caching provider to use for session and invite data\n\nIf none is provided the top-level caching provider is used"
                },
                "clients": {
                    "description": "A list of CM Servers this Client should connect to.\n\nIf not specified a default `BotConnection` for this instance is generated",
                    "examples": [
                        [
                            {
                                "host": "localhost:8095",
                                "secret": "aRandomString"
                            }
                        ]
                    ],
                    "items": {
                        "$ref": "#/definitions/BotConnection"
                    },
                    "type": "array"
                },
                "credentials": {
                    "$ref": "#/definitions/WebCredentials",
                    "description": "Separate credentials for the web interface can be provided when also running the api.\n\nAll properties not specified will default to values given in ENV/ARG credential properties\n\nRefer to the [required credentials table](https://github.com/FoxxMD/context-mod/blob/master/docs/operatorConfiguration.md#minimum-required-configuration) to see what is necessary for the web interface.",
                    "examples": [
                        {
                            "clientId": "f4b4df1_9oiu",
                            "clientSecret": "34v5q1c564_yt7",
                            "redirectUri": "http://localhost:8085/callback"
                        }
                    ]
                },
                "invites": {
                    "description": "Settings related to oauth flow invites",
                    "properties": {
                        "maxAge": {
                            "default": 0,
                            "description": "Number of seconds an invite should be valid for\n\n If `0` or not specified (default) invites do not expire",
                            "examples": [
                                0
                            ],
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "logLevel": {
                    "description": "The default log level to filter to in the web interface\n\nIf not specified or `null` will be same as global `logLevel`",
                    "enum": [
                        "debug",
                        "error",
                        "info",
                        "verbose",
                        "warn"
                    ],
                    "type": "string"
                },
                "maxLogs": {
                    "default": 200,
                    "description": "Maximum number of log statements to keep in memory for each subreddit",
                    "examples": [
                        200
                    ],
                    "type": "number"
                },
                "operators": {
                    "description": "The name, or names, of the Reddit accounts, without prefix, that the operators of this **web interface** uses.\n\n**Note:** This is **not the same** as the top-level `operator` property. This allows specified users to see the status of all `clients` but **not** access to them -- that must still be specified in the `operator.name` property in the configuration of each bot.\n\n\nEX -- User is /u/FoxxMD then `\"name\": [\"FoxxMD\"]`",
                    "examples": [
                        [
                            "FoxxMD",
                            "AnotherUser"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "port": {
                    "default": 8085,
                    "description": "The port for the web interface\n\n* ENV => `PORT`\n* ARG => `--port <number>`",
                    "examples": [
                        8085
                    ],
                    "type": "number"
                },
                "session": {
                    "description": "Settings to configure the behavior of user sessions -- the session is what the web interface uses to identify logged in users.",
                    "properties": {
                        "maxAge": {
                            "default": 86400,
                            "description": "Number of seconds a session should be valid for.\n\nDefault is 1 day",
                            "examples": [
                                86400
                            ],
                            "type": "number"
                        },
                        "secret": {
                            "description": "The secret value used to encrypt session data\n\nIf provider is persistent (`redis`) specifying a value here will ensure sessions are valid between application restarts\n\nWhen not present or `null` a random string is generated on application start",
                            "examples": [
                                "definitelyARandomString"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "type": "object"
}

