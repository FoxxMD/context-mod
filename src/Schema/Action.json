{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "AuthorCriteria": {
            "additionalProperties": false,
            "description": "Criteria with which to test against the author of an Activity. The outcome of the test is based on:\n\n1. All present properties passing and\n2. If a property is a list then any value from the list matching",
            "examples": [
                {
                    "flairText": [
                        "Contributor",
                        "Veteran"
                    ],
                    "isMod": true,
                    "name": [
                        "FoxxMD",
                        "AnotherUser"
                    ]
                }
            ],
            "minProperties": 1,
            "properties": {
                "age": {
                    "description": "Test the age of the Author's account (when it was created) against this comparison\n\nThe syntax is `(< OR > OR <= OR >=) <number> <unit>`\n\n* EX `> 100 days` => Passes if Author's account is older than 100 days\n* EX `<= 2 months` => Passes if Author's account is younger than or equal to 2 months\n\nUnit must be one of [DayJS Duration units](https://day.js.org/docs/en/durations/creating)\n\n[See] https://regexr.com/609n8 for example",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(days?|weeks?|months?|years?|hours?|minutes?|seconds?|milliseconds?)\\s*$",
                    "type": "string"
                },
                "commentKarma": {
                    "description": "A string containing a comparison operator and a value to compare karma against\n\nThe syntax is `(< OR > OR <= OR >=) <number>[percent sign]`\n\n* EX `> 100`  => greater than 100 comment karma\n* EX `<= 75%` => comment karma is less than or equal to 75% of **all karma**",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "description": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "An (array of) string/regular expression to test contents of an Author's profile description against\n\nIf no flags are specified then the **insensitive** flag is used by default\n\nIf using an array then if **any** value in the array passes the description test passes",
                    "examples": [
                        [
                            "/test$/i",
                            "look for this string literal"
                        ]
                    ]
                },
                "flairCssClass": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A (user) flair css class (or list of) from the subreddit to match against",
                    "examples": [
                        "red"
                    ]
                },
                "flairTemplate": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A (user) flair template id (or list of) from the subreddit to match against"
                },
                "flairText": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A (user) flair text value (or list of) from the subreddit to match against",
                    "examples": [
                        "Approved"
                    ]
                },
                "isMod": {
                    "description": "Is the author a moderator?",
                    "type": "boolean"
                },
                "linkKarma": {
                    "description": "A string containing a comparison operator and a value to compare link karma against\n\nThe syntax is `(< OR > OR <= OR >=) <number>[percent sign]`\n\n* EX `> 100`  => greater than 100 link karma\n* EX `<= 75%` => link karma is less than or equal to 75% of **all karma**",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "name": {
                    "description": "A list of reddit usernames (case-insensitive) to match against. Do not include the \"u/\" prefix\n\n EX to match against /u/FoxxMD and /u/AnotherUser use [\"FoxxMD\",\"AnotherUser\"]",
                    "examples": [
                        "FoxxMD",
                        "AnotherUser"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "shadowBanned": {
                    "description": "Is the author shadowbanned?\n\nThis is determined by trying to retrieve the author's profile. If a 404 is returned it is likely they are shadowbanned",
                    "type": "boolean"
                },
                "totalKarma": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 100`  => greater than 100",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "userNotes": {
                    "description": "A list of UserNote properties to check against the User Notes attached to this Author in this Subreddit (must have Toolbox enabled and used User Notes at least once)",
                    "items": {
                        "$ref": "#/definitions/UserNoteCriteria"
                    },
                    "type": "array"
                },
                "verified": {
                    "description": "Does Author's account have a verified email?",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "AuthorOptions": {
            "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
            "examples": [
                {
                    "include": [
                        {
                            "flairText": [
                                "Contributor",
                                "Veteran"
                            ]
                        },
                        {
                            "isMod": true
                        }
                    ]
                }
            ],
            "properties": {
                "exclude": {
                    "description": "Only runs if `include` is not present. Each AuthorCriteria is comprised of conditions that the Author being checked must \"not\" pass. See excludeCondition for set behavior\n\nEX: `isMod: true, name: Automoderator` => Will pass if the Author IS NOT a mod and IS NOT named Automoderator",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                },
                "excludeCondition": {
                    "default": "OR",
                    "description": "* OR => if ANY exclude condition \"does not\" pass then the exclude test passes\n* AND => if ALL exclude conditions \"do not\" pass then the exclude test passes\n\nDefaults to OR",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "type": "string"
                },
                "include": {
                    "description": "Will \"pass\" if any set of AuthorCriteria passes",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CommentState": {
            "description": "Different attributes a `Comment` can be in. Only include a property if you want to check it.",
            "examples": [
                {
                    "op": true,
                    "removed": false
                }
            ],
            "properties": {
                "age": {
                    "description": "A duration and how to compare it against a value\n\nThe syntax is `(< OR > OR <= OR >=) <number> <unit>` EX `> 100 days`, `<= 2 months`\n\n* EX `> 100 days` => Passes if the date being compared is before 100 days ago\n* EX `<= 2 months` => Passes if the date being compared is after or equal to 2 months\n\nUnit must be one of [DayJS Duration units](https://day.js.org/docs/en/durations/creating)\n\n[See] https://regexr.com/609n8 for example",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(days|weeks|months|years|hours|minutes|seconds|milliseconds)\\s*$",
                    "type": "string"
                },
                "approved": {
                    "type": "boolean"
                },
                "deleted": {
                    "type": "boolean"
                },
                "depth": {
                    "description": "The (nested) level of a comment.\n\n* 0 mean the comment is at top-level (replying to submission)\n* non-zero, Nth value means the comment has N parent comments",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(days|weeks|months|years|hours|minutes|seconds|milliseconds)\\s*$",
                    "type": "string"
                },
                "distinguished": {
                    "type": "boolean"
                },
                "filtered": {
                    "type": "boolean"
                },
                "locked": {
                    "type": "boolean"
                },
                "op": {
                    "description": "Is this Comment Author also the Author of the Submission this comment is in?",
                    "type": "boolean"
                },
                "removed": {
                    "type": "boolean"
                },
                "reports": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 2`  => greater than 2 total reports\n\nDefaults to TOTAL reports on an Activity. Suffix the value with the report type to check that type:\n\n* EX `> 3 mod` => greater than 3 mod reports\n* EX `>= 1 user` => greater than 1 user report",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "score": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 100`  => greater than 100",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "spam": {
                    "type": "boolean"
                },
                "stickied": {
                    "type": "boolean"
                },
                "submissionState": {
                    "description": "A list of SubmissionState attributes to test the Submission this comment is in",
                    "items": {
                        "$ref": "#/definitions/SubmissionState"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SubmissionState": {
            "description": "Different attributes a `Submission` can be in. Only include a property if you want to check it.",
            "examples": [
                {
                    "over_18": true,
                    "removed": false
                }
            ],
            "properties": {
                "age": {
                    "description": "A duration and how to compare it against a value\n\nThe syntax is `(< OR > OR <= OR >=) <number> <unit>` EX `> 100 days`, `<= 2 months`\n\n* EX `> 100 days` => Passes if the date being compared is before 100 days ago\n* EX `<= 2 months` => Passes if the date being compared is after or equal to 2 months\n\nUnit must be one of [DayJS Duration units](https://day.js.org/docs/en/durations/creating)\n\n[See] https://regexr.com/609n8 for example",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(days|weeks|months|years|hours|minutes|seconds|milliseconds)\\s*$",
                    "type": "string"
                },
                "approved": {
                    "type": "boolean"
                },
                "deleted": {
                    "type": "boolean"
                },
                "distinguished": {
                    "type": "boolean"
                },
                "filtered": {
                    "type": "boolean"
                },
                "flairTemplate": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "isRedditMediaDomain": {
                    "description": "Is the submission a reddit-hosted image or video?",
                    "type": "boolean"
                },
                "is_self": {
                    "type": "boolean"
                },
                "link_flair_css_class": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "link_flair_text": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "locked": {
                    "type": "boolean"
                },
                "over_18": {
                    "description": "NSFW",
                    "type": "boolean"
                },
                "pinned": {
                    "type": "boolean"
                },
                "removed": {
                    "type": "boolean"
                },
                "reports": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 2`  => greater than 2 total reports\n\nDefaults to TOTAL reports on an Activity. Suffix the value with the report type to check that type:\n\n* EX `> 3 mod` => greater than 3 mod reports\n* EX `>= 1 user` => greater than 1 user report",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "score": {
                    "description": "A string containing a comparison operator and a value to compare against\n\nThe syntax is `(< OR > OR <= OR >=) <number>`\n\n* EX `> 100`  => greater than 100",
                    "pattern": "^\\s*(>|>=|<|<=)\\s*(\\d+)\\s*(%?)(.*)$",
                    "type": "string"
                },
                "spam": {
                    "type": "boolean"
                },
                "spoiler": {
                    "type": "boolean"
                },
                "stickied": {
                    "type": "boolean"
                },
                "title": {
                    "description": "A valid regular expression to match against the title of the submission",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserNoteCriteria": {
            "properties": {
                "count": {
                    "default": ">= 1",
                    "description": "Number of occurrences of this type. Ignored if `search` is `current`\n\nA string containing a comparison operator and/or a value to compare number of occurrences against\n\nThe syntax is `(< OR > OR <= OR >=) <number>[percent sign] [ascending|descending]`",
                    "examples": [
                        ">= 1"
                    ],
                    "pattern": "^\\s*(?<opStr>>|>=|<|<=)\\s*(?<value>\\d+)\\s*(?<percent>%?)\\s*(?<extra>asc.*|desc.*)*$",
                    "type": "string"
                },
                "search": {
                    "default": "current",
                    "description": "How to test the notes for this Author:\n\n### current\n\nOnly the most recent note is checked for `type`\n\n### total\n\nThe `count` comparison of `type` must be found within all notes\n\n* EX `count: > 3`   => Must have more than 3 notes of `type`, total\n* EX `count: <= 25%` => Must have 25% or less of notes of `type`, total\n\n### consecutive\n\nThe `count` **number** of `type` notes must be found in a row.\n\nYou may also specify the time-based order in which to search the notes by specifying `ascending (asc)` or `descending (desc)` in the `count` value. Default is `descending`\n\n* EX `count: >= 3` => Must have 3 or more notes of `type` consecutively, in descending order\n* EX `count: < 2`  => Must have less than 2 notes of `type` consecutively, in descending order\n* EX `count: > 4 asc` => Must have greater than 4 notes of `type` consecutively, in ascending order",
                    "enum": [
                        "consecutive",
                        "current",
                        "total"
                    ],
                    "examples": [
                        "current"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "User Note type key to search for",
                    "examples": [
                        "spamwarn"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        }
    },
    "properties": {
        "authorIs": {
            "$ref": "#/definitions/AuthorOptions",
            "description": "If present then these Author criteria are checked before running the Action. If criteria fails then the Action is not run.",
            "examples": [
                {
                    "include": [
                        {
                            "flairText": [
                                "Contributor",
                                "Veteran"
                            ]
                        },
                        {
                            "isMod": true
                        }
                    ]
                }
            ]
        },
        "dryRun": {
            "default": false,
            "description": "If `true` the Action will not make the API request to Reddit to perform its action.",
            "examples": [
                false,
                true
            ],
            "type": "boolean"
        },
        "enable": {
            "default": true,
            "description": "If set to `false` the Action will not be run",
            "examples": [
                true
            ],
            "type": "boolean"
        },
        "itemIs": {
            "description": "A list of criteria to test the state of the `Activity` against before running the Action.\n\nIf any set of criteria passes the Action will be run.",
            "items": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/SubmissionState"
                    },
                    {
                        "$ref": "#/definitions/CommentState"
                    }
                ]
            },
            "type": "array"
        },
        "kind": {
            "description": "The type of action that will be performed",
            "enum": [
                "approve",
                "ban",
                "comment",
                "flair",
                "lock",
                "message",
                "remove",
                "report",
                "userflair",
                "usernote"
            ],
            "type": "string"
        },
        "name": {
            "description": "An optional, but highly recommended, friendly name for this Action. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes",
            "examples": [
                "myDescriptiveAction"
            ],
            "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
            "type": "string"
        }
    },
    "required": [
        "kind"
    ],
    "type": "object"
}

