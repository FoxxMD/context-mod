<html lang="en">
<%- include('partials/head', {title: undefined}) %>
<body class="bg-gray-900 text-white">
<div class="min-w-screen min-h-screen font-sans">
    <%- include('partials/header', {showHelp: true}) %>
    <%- include('partials/botsTab') %>
    <%- include('partials/subredditsTab') %>
    <div class="container mx-auto">
        <div class="grid">
            <div class="">
                <div class="pb-6 md:px-7">
                    <% if(isOperator) { %>
                        <div class="sub" data-bot="system" data-subreddit="All">
                            <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-3 gap-5">
                            </div>
                            <br/>
                            <%- include('partials/loadingIcon') %>
                            <div data-subreddit="All" class="logs font-mono text-sm">
                                <% system.logs.forEach(function (logEntry){ %>
                                    <%- logEntry %>
                                <% }) %>
                            </div>
                        </div>
                    <% } %>
                    <% bots.forEach(function (bot){ %>
                        <% bot.subreddits.forEach(function (data){ %>
                        <div class="sub <%= bot.system.running ? '' : 'offline' %>" data-subreddit="<%= data.name %>" data-bot="<%= bot.system.name %>">
                            <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-3 gap-5">
                                <div class="bg-white shadow-md rounded my-3 bg-gray-600 overviewContainer">
                                    <div class="space-x-4 px-4 p-2 leading-2 font-semibold bg-gray-300 bg-gray-700 ">
                                        <div class="flex items-center justify-between">
                                            <h4>Overview</h4>
                                            <% if (data.name === 'All') { %>
                                                <div class="flex items-center flex-end">
                                                    <div>
                                                        <a class="action" data-action="start" data-type="bot"
                                                           data-subreddit="<%= data.name %>"
                                                           href="#">Start All</a> |
                                                        <a class="action" data-action="stop" data-type="bot"
                                                           data-subreddit="<%= data.name %>"
                                                           href="#">Stop All</a> |
                                                        <a class="action" data-action="reload"
                                                           data-subreddit="<%= data.name %>"
                                                           href="#">Update All</a>
                                                    </div>
                                                </div>
                                            <% } else { %>
                                                <div class="flex items-center flex-end">
                                                    <div>
                                                        <span class="mr-2">Check:</span>
                                                        <a class="action" data-action="check" data-type="unmoderated"
                                                           data-subreddit="<%= data.name %>"
                                                           href="#">Unmoderated</a> |
                                                        <a class="action" data-action="check" data-type="modqueue"
                                                           data-subreddit="<%= data.name %>"
                                                           href="#">Modqueue</a>
                                                    </div>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                    <div class="p-4">
                                        <div class="stats">
                                            <% if (data.name !== 'All') { %>
                                                <label>
                                                    <span class="has-tooltip">
                                                                <span class="tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2 text-left">
                                                                    <div>The "main" process monitoring Activity for the subreddit.</div>
                                                                    <div><b>Starting</b> or <b>Stopping</b> this will also Start/Stop <b>Queue/Events.</b></div>
                                                                    <div>Additionally, the <b>Stopped</b> state will prevent configuration from being checked on heartbeat. This is useful if the subreddit's config is really broken and you want to essentially ignore this subreddit until manually interacted with.</div>
                                                                </span>
                                                                <span>
                                                                    Bot
                                                                    <svg xmlns="http://www.w3.org/2000/svg"
                                                                         class="h-4 w-4 inline-block cursor-help"
                                                                         fill="none"
                                                                         viewBox="0 0 24 24" stroke="currentColor">
                                                                        <use xlink:href="public/questionsymbol.svg#q" />
                                                                    </svg>
                                                                </span>
                                                        </span>
                                                </label>
                                                <div class="flex items-center justify-between">
                                                    <span class="font-semibold botState"><%= `${data.botState.state}${data.botState.causedBy === 'system' ? '' : ' (user)'}` %></span>
                                                    <div class="flex items-center flex-end">
                                                        <div>
                                                            <a class="action" data-action="start" data-type="bot"
                                                               data-subreddit="<%= data.name %>" href="#">Start</a> |
                                                            <a class="action" data-action="stop" data-type="bot"
                                                               data-subreddit="<%= data.name %>" href="#">Stop</a>
                                                        </div>
                                                    </div>
                                                </div>
                                                <label>
                                                        <span class="has-tooltip">
                                                                <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2 text-left'>
                                                                    <div>The <b>Queue</b> controls processing of <b>Activities</b> ingested from <b>Events.</b></div>
                                                                    <ul class="list-inside list-disc">
                                                                        <li><b>Starting</b> the Queue will begin Processing (running checks on) Queued Activities based on the max number of workers available</li>
                                                                        <li><b>Pausing</b> the Queue will prevent any Queued Activities from being Processed (excluding already running Activities)</li>
                                                                        <li><b>Stopping</b> the Queue will <b>clear any existing Queued Activities</b> and prevent any subsequently queued Activities from being Processed</li>
                                                                    </ul>
                                                                    <div>If all available workers are processing Activities then new Activities returned from <b>Events</b> will be <b>Queued</b></div>
                                                                </span>
                                                                <span>
                                                                    Queue
                                                                    <svg xmlns="http://www.w3.org/2000/svg"
                                                                         class="h-4 w-4 inline-block cursor-help"
                                                                         fill="none"
                                                                         viewBox="0 0 24 24" stroke="currentColor">
                                                                        <use xlink:href="public/questionsymbol.svg#q" />
                                                                    </svg>
                                                                </span>
                                                        </span>
                                                </label>
                                                <div class="flex items-center justify-between">
                                                    <span class="font-semibold queueState"><%= `${data.queueState.state}${data.queueState.causedBy === 'system' ? '' : ' (user)'}` %></span>
                                                    <div class="flex items-center flex-end">
                                                        <div>
                                                            <a class="action" data-action="start" data-type="queue"
                                                               data-subreddit="<%= data.name %>" href="#">Start</a> |
                                                            <a class="action" data-action="pause" data-type="queue"
                                                               data-subreddit="<%= data.name %>" href="#">Pause</a> |
                                                            <a class="action" data-action="stop" data-type="queue"
                                                               data-subreddit="<%= data.name %>" href="#">Stop</a>
                                                        </div>
                                                    </div>
                                                </div>
                                                <label>
                                                    <span class="has-tooltip">
                                                                <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2 text-left'>
                                                                    <div><b>Events</b> controls polling (monitoring) of <b>Activity Sources</b> (unmoderated, modqueue, comments, etc.)</div>
                                                                    <ul class="list-inside list-disc">
                                                                        <li><b>Starting</b> Events will cause polling to begin. Any new Activities discovered after polling begins will be sent to <b>Queue</b></li>
                                                                        <li><b>Pausing</b> Events will cause polling to stop.</li>
                                                                        <li><b>Stopping</b> Events will cause polling to stop and rebuild polling behavior on next start.</li>
                                                                    </ul>
                                                                </span>
                                                                <span>
                                                                    Events
                                                                    <svg xmlns="http://www.w3.org/2000/svg"
                                                                         class="h-4 w-4 inline-block cursor-help"
                                                                         fill="none"
                                                                         viewBox="0 0 24 24" stroke="currentColor">
                                                                        <use xlink:href="public/questionsymbol.svg#q" />
                                                                    </svg>
                                                                </span>
                                                        </span>
                                                </label>
                                                <div class="flex items-center justify-between">
                                                    <span class="font-semibold eventsState"><%= `${data.eventsState.state}${data.eventsState.causedBy === 'system' ? '' : ' (user)'}` %></span>
                                                    <div class="flex items-center flex-end">
                                                        <div>
                                                            <a class="action" data-action="start" data-type="event"
                                                               data-subreddit="<%= data.name %>" href="#">Start</a> |
                                                            <a class="action" data-action="pause" data-type="event"
                                                               data-subreddit="<%= data.name %>" href="#">Pause</a> |
                                                            <a class="action" data-action="stop" data-type="event"
                                                               data-subreddit="<%= data.name %>" href="#">Stop</a>
                                                        </div>
                                                    </div>
                                                </div>
                                                <label>Mod Perms</label>
                                                <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2'>
                                                        <span>
                                                            <ul class="list-inside list-disc modPermissionsList">
                                                                <% data.permissions.forEach(function (i){ %>
                                                                    <li class="font-mono"><%= i %></li>
                                                                <% }) %>
                                                            </ul>
                                                        </span>
                                                    </span>
                                                    <span class="cursor-help underline modPermissionsCount" style="text-decoration-style: dotted"><%= data.permissions.length %></span>
                                                </span>
                                                <label>Slow Mode</label>
                                                <span class="delayBy"><%= data.delayBy %></span>
                                                <label>Retention</label>
                                                <span><%= data.retention %></span>
                                            <% } %>
                                            <% if (data.name === 'All') { %>
                                                    <label>Status</label>
                                                    <span class="font-semibold botStatus"><%= bot.system.running ? 'ONLINE' : 'OFFLINE' %></span>
                                                    <label>Account</label>
                                                    <span><a href="https://reddit.com/<%= bot.system.account %>"><%= bot.system.account %></a></span>
                                                <label>Uptime</label>
                                                <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2'>
                                                        <%= bot.system.startedAt %>
                                                    </span>
                                                    <span>
                                                        <span id="startedAtHuman"><%= bot.system.startedAtHuman %></span>
                                                    </span>
                                                </span>
                                                <label>Heartbeat Interval</label>
                                                <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2'>
                                                        <%= data.heartbeat %> seconds
                                                    </span>
                                                    <%= data.heartbeatHuman %>
                                                </span>
                                                <label>Next Heartbeat</label>
                                                <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2'>
                                                        <span id="nextHeartbeat"><%= data.nextHeartbeat %></span>
                                                    </span>
                                                    <span id="nextHeartbeatHuman"><%= data.nextHeartbeatHuman %></span>
                                                </span>
                                            <% } %>
                                            <label>
                                                    <span class="has-tooltip">
                                                    <span style="margin-top:35px"
                                                          class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2 text-left'>
                                                        <div>The total number of <b>Activities</b> (Comment/Submission) currently being processed by the bot or queued to be processed.</div>
                                                        <div>
                                                            Max Concurrent Processing
                                                            <ul class="list-inside list-disc">
                                                                <li>Real Max: <%= data.maxWorkers %></li>
                                                                <% if (data.name !== 'All') { %>
                                                                    <li>Config Max: <%= data.subMaxWorkers %></li>
                                                                <% } %>
                                                                <li>Global Max: <%= data.globalMaxWorkers %></li>
                                                            </ul>
                                                        </div>
                                                    </span>
                                                    <span>Activities <svg xmlns="http://www.w3.org/2000/svg"
                                                                          class="h-4 w-4 inline-block cursor-help"
                                                                          fill="none"
                                                                          viewBox="0 0 24 24" stroke="currentColor">
                                                                        <use xlink:href="public/questionsymbol.svg#q" />
                                                        </svg>
                                                    </span>
                                                </span>
                                            </label>
                                            <span>
                                                <span class="runningActivities"><%= data.runningActivities %></span> Processing /
                                                <span class="queuedActivities"><%= data.queuedActivities %></span> Queued /
                                                <span class="has-tooltip">
                                                    <span style="margin-top:35px"
                                                          class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2 text-left delayedItemsList'>
                                                    </span>
                                                <span class="underline" style="text-decoration-style: dotted"><span class="delayedItemsCount"><%= data.delayedItems.length %></span> Delayed</span>
                                                </span>
                                            </span>
                                            <label>Operated By</label>
                                            <span><%= operatorDisplay %></span>
                                            <% if (data.name === 'All' && isOperator) { %>
                                                <label>Operators</label>
                                                <span><%= operators %></span>
                                                <label>Oauth Scopes</label>
                                                    <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2'>
                                                        <span>
                                                            <ul class="list-inside list-disc">
                                                                <% data.scopes.forEach(function (i){ %>
                                                                    <li class="font-mono"><%= i %></li>
                                                                <% }) %>
                                                            </ul>
                                                        </span>
                                                    </span>
                                                    <span class="cursor-help underline" style="text-decoration-style: dotted"><%= data.scopes.length %></span>
                                                </span>
                                            <% } else %>
                                            <label class="guestsLabel <%= (!isOperator && !data.isMod ? 'hidden' : '')%>">
                                                <span class="has-tooltip">
                                                       <span style="margin-top:55px" class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black space-y-3 p-2 text-left'>
                                                            <p>Reddit users who are allowed to access your bot even though they are not moderators.</p>
                                                            <p>Guest can do everything a regular mod can except view/add/remove Guest.</p>
                                                            <p>Additionally, they can <b>edit the subreddit's config using the bot.</b> If a Guest edits your config their username will be mentioned in the wiki page edit reason.</p>
                                                        </span>
                                                        <span>
                                                            Guests<svg xmlns="http://www.w3.org/2000/svg"
                                                                          class="h-4 w-4 inline-block cursor-help"
                                                                          fill="none"
                                                                          viewBox="0 0 24 24" stroke="currentColor">
                                                                <use xlink:href="public/questionsymbol.svg#q" />
                                                            </svg>
                                                        </span>
                                                    </span>
                                            </label>
                                            <span class="guests <%= (!isOperator && !data.isMod ? 'hidden' : '')%>" style="margin-left: 5px;">
                                                <ul class="list-disc list-inside guestList">
                                                    <li class="smallLi">None</li>
                                                </ul>
                                                <div class="guestAdd <%= (!data.isMod ? 'hidden' : '')%> inline-flex items-center mt-1">
                                                    <div>
                                                        <input
                                                                               style="width:200px;"
                                                                               class="guestAddName border-gray-50 placeholder-gray-500 rounded mr-1 p-1 text-black"
                                                        placeholder="userName"/>
                                                        <input type="datetime-local"
                                                                                         class="guestAddTime border-gray-50 placeholder-gray-500 mt-2 mr-2 rounded text-black"
                                                                                         value="<%= now %>"
                                                                                         min="<%= now %>"/>

                                                    </div>
                                                    <a href="" class="addGuest">Add</a>
                                                </div>
                                            </span>
                                        </div>
                                        <% if (data.name !== 'All') { %>
                                            <ul class="list-disc list-inside mt-4 pollingInfo">
                                                <% data.pollingInfo.forEach(function (i){ %>
                                                    <li>Polling <%- i %></li>
                                                <% }) %>
                                            </ul>
                                        <% } %>
                                    </div>
                                </div>
                                <% if (data.name === 'All') { %>
                                    <div class="bg-white shadow-md rounded my-3 bg-gray-600 configContainer">
                                        <div class="space-x-4 px-4 p-2 leading-2 font-semibold bg-gray-300 bg-gray-700 ">
                                            <h4>API</h4>
                                        </div>
                                        <div class="p-4">
                                            <div class="stats">
                                                <label>Soft Limit</label>
                                                <span>< <span id="softLimit"><%= data.softLimit %></span></span>
                                                <label>Hard Limit</label>
                                                <span>< <span id="hardLimit"><%= data.hardLimit %></span></span>
                                                <label>Api Nanny</label>
                                                <span><b><span id="nannyMode"><%= data.nannyMode %></span></b></span>
                                                <label>Api Usage</label>
                                                <span><span id="apiLimit"><%= data.apiLimit %></span>/600 (~<span
                                                            id="apiAvg"><%= data.apiAvg %></span>req/s)</span>
                                                <label>
                                                    <span class="has-tooltip">
                                                       <span style="margin-top:55px" class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black space-y-3 p-2 text-left'>
                                                            <p>Reddit restricts api usage, per account, to <b>600 requests every 10 minutes.</b></p>
                                                            <p><b>Depleted</b> is the estimated time until all 600 requests are used based on <b>Api Usage.</b></p>
                                                            <p>API usage is sustainable when <b>Depleted</b> is greater than <b>Limit Reset</b></p>
                                                        </span>
                                                        <span>
                                                            Depleted <svg xmlns="http://www.w3.org/2000/svg"
                                                                             class="h-4 w-4 inline-block cursor-help"
                                                                             fill="none"
                                                                             viewBox="0 0 24 24" stroke="currentColor">
                                                                <use xlink:href="public/questionsymbol.svg#q" />
                                                            </svg>
                                                        </span>
                                                    </span>
                                                </label>
                                                <span>in ~<span id="apiDepletion"><%= data.apiDepletion %></span></span>
                                                <label>
                                                    <span class="has-tooltip">
                                                       <span style="margin-top:35px" class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black space-y-3 p-2 text-left'>
                                                            <p>Reddit restricts api usage, per account, to <b>600 requests every 10 minutes.</b></p>
                                                            <p><b>Limit Reset</b> is the amount of time remaining in the current 10 minute period until the limit is reset to 600.</p>
                                                        </span>
                                                        <span>
                                                            Limit Reset <svg xmlns="http://www.w3.org/2000/svg"
                                                                          class="h-4 w-4 inline-block cursor-help"
                                                                          fill="none"
                                                                          viewBox="0 0 24 24" stroke="currentColor">
                                                                <use xlink:href="public/questionsymbol.svg#q" />
                                                            </svg>
                                                        </span>
                                                    </span>
                                                </label>
                                                <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2'>
                                                        <span id="limitReset"><%= data.limitReset %></span>
                                                    </span>
                                                    <span id="limitResetHuman"><%= data.limitResetHuman %></span>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                <% } %>
                                <% if (data.name !== 'All') { %>
                                    <div class="bg-white shadow-md rounded my-3 bg-gray-600 configContainer">
                                        <div class="space-x-4 px-4 p-2 leading-2 font-semibold bg-gray-700 ">
                                            <h4>Config
                                                    <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 wikiRevision'>
                                                        <%= data.wikiRevision %>
                                                    </span>
                                                        (Revised <span class="wikiRevisionHuman"><%= data.wikiRevisionHuman %></span>)
                                                </span>
                                            </h4>
                                        </div>
                                        <div class="p-4">
                                            <div class="stats">
                                                <label>Valid</label>
                                                <span class="font-semibold validConfig"><%= data.validConfig %></span>
                                                <label>Checks</label>
                                                <span><span class="submissionCheckCount"><%= data.checks.submissions %></span> Submission | <span class="commentCheckCount"><%= data.checks.comments %></span> Comment </span>
                                                <label class="dryRunLabel">Dry Run</label>
                                                <span><%= data.dryRun %></span>
                                                <label>Updated</label>
                                                <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 startedAt'>
                                                        <%= data.startedAt %>
                                                    </span>
                                                    <span class="startedAtHuman"><%= data.startedAtHuman %></span>
                                                </span>
                                                <label>Checked</label>
                                                <span>
                                                <span class="has-tooltip">
                                                    <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 wikiLastCheck'>
                                                        <%= data.wikiLastCheck %>
                                                    </span>
                                                    <span class="wikiLastCheckHuman"><%= data.wikiLastCheckHuman %></span>
                                                </span>
                                                    <a class="action" data-action="reload"
                                                       data-subreddit="<%= data.name %>"
                                                       href="#">Update</a> | <a
                                                            class="action" data-action="reload" data-force="true"
                                                            data-subreddit="<%= data.name %>" href="#">Force</a>
                                                    </span>
                                                <label>Location</label>
                                                <span>
                                                    <a style="display: inline"
                                                       href="<%= data.wikiHref %>"><%= data.wikiLocation %></a> | <a class="openConfig" style="display: inline" target="_blank"
                                                                                                                     href="/config?format=<%= data.configFormat %>&instance=<%= instanceId %>&bot=<%= bot.system.name %>&subreddit=<%= data.name %>">View</a>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                <% } %>
                                <div class="bg-white shadow-md rounded my-3 bg-gray-600 usageContainer">
                                    <div class="space-x-4 px-4 p-2 leading-2 font-semibold bg-gray-700 ">
                                        <h4>Usage</h4>
                                    </div>
                                    <div class="p-4">
                                        <div class="flex items-top justify-evenly">
                                            <div>
                                                <div class="text-left font-semibold pb-2">Bot</div>
                                                <div data-subreddit="<%= data.name %>" class="stats botStats allStats mb-2">
                                                    <label>Events</label>
                                                    <span class="eventsCount">
                                                        <%= data.stats.historical.eventsCheckedTotal %>
                                                    </span>
                                                    <label>Checks</label>
                                                    <span class="has-tooltip">
                                                        <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2'>
                                                            <span><%= data.stats.historical.checksTriggeredTotal %></span> Triggered / <span><%= data.stats.historical.checksRunTotal %></span> Run / <span><%= data.stats.historical.checksFromCacheTotal %></span> Cached
                                                        </span>
                                                        <span class="cursor-help underline" style="text-decoration-style: dotted"><span class="checksCount"><%= data.stats.historical.checksTriggeredTotal %></span> Triggered</span>
                                                    </span>

                                                    <label>Rules</label>
                                                    <span class="has-tooltip">
                                                        <span class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2'>
                                                            <span><%= data.stats.historical.rulesTriggeredTotal %></span> Triggered / <span><%= data.stats.historical.rulesCachedTotal %></span> Cached / <span><%= data.stats.historical.rulesRunTotal %></span> Run
                                                        </span>
                                                        <span class="cursor-help underline" style="text-decoration-style: dotted"><span class="rulesCount"><%= data.stats.historical.rulesTriggeredTotal %></span> Triggered</span>
                                                    </span>

                                                    <label>Actions</label>
                                                    <span>
                                                        <span><span class="actionsCount"><%= data.stats.historical.actionsRunTotal === undefined ? '0' : data.stats.historical.actionsRunTotal %></span> Run</span>
                                                    </span>
                                                </div>
                                                <% if (data.name !== 'All') { %>
                                                    <a class="openActioned" target="_blank" href="/events?instance=<%= instanceId %>&bot=<%= bot.system.name %>&subreddit=<%= data.name %>" style="text-decoration-style: dotted">Actioned Events</a>
                                                <% } else { %>
                                                    <a class="openActioned" target="_blank" href="/events?instance=<%= instanceId %>&bot=<%= bot.system.name %>">Actioned Events</a>
                                                <% } %>
                                            </div>
                                            <div>
                                                <div class="text-left pb-2">
                                                    <% if (data.name === 'All') { %>
                                                        <span class="font-semibold">Cache</span>
                                                    <% } else { %>
                                                        <div>
                                                            <span class="font-semibold capitalize">Cache - <%= data.stats.cache.provider %><%= data.stats.cache.isShared ? ' (Shared)' : '' %></span>
                                                            <span class="has-tooltip">
                                                                <span style="right: 0;"
                                                                      class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2'>
                                                                    <% if (data.stats.cache.isShared) { %>
                                                                        <div>This subreddit is using the default, <b>application-wide shared cache</b> because its <b
                                                                                    class="font-mono">caching</b> configuration is not specified.</div>
                                                                        <div>Pros:
                                                                        <ul class="list-inside list-disc">
                                                                            <li>All subreddits can utilize any cached authors/etc., reduces overall api usage</li>
                                                                            <li>Bot Operator can fine tune cache without subreddit interaction</li>
                                                                        </ul>
                                                                    </div>
                                                                        <div>
                                                                        Cons:
                                                                        <ul class="list-inside list-disc">
                                                                            <li>Subreddits must use default TTLs which may not fit use case for rules</li>
                                                                            <li>Bots operating subreddits with dramatically contrasting caching requirements may suffer in performance/api usage</li>
                                                                        </ul>
                                                                    </div>
                                                                    <% } else { %>
                                                                        <div>This subreddit is using <b>a private cache instance</b> because its <b
                                                                                    class="font-mono">caching</b> configuration is non-default.</div>
                                                                        <div>Pros:
                                                                        <ul class="list-inside list-disc">
                                                                            <li>Custom configuration (TTLs, max size) may fit subreddit usage of the bot better</li>
                                                                            <li>Using a redis backend may increase performance for very large caches</li>
                                                                        </ul>
                                                                    </div>
                                                                        <div>
                                                                        Cons:
                                                                        <ul class="list-inside list-disc">
                                                                            <li>Using a private <span class="font-mono">memory</span> cache produces a larger memory burden for the operator's host machine since it is not shared</li>
                                                                            <li>Bot Operator cannot fine-tune caching parameters for this subreddit</li>
                                                                        </ul>
                                                                    </div>
                                                                    <% } %>
                                                                </span>
                                                                <span>
                                                                    <svg xmlns="http://www.w3.org/2000/svg"
                                                                         class="h-4 w-4 inline-block cursor-help"
                                                                         fill="none"
                                                                         viewBox="0 0 24 24" stroke="currentColor">
                                                                        <use xlink:href="public/questionsymbol.svg#q" />
                                                                    </svg>
                                                                </span>
                                                        </span>
                                                        </div>
                                                    <% } %>
                                                </div>
                                                <div class="stats">
                                                    <label>Keys</label>
                                                    <span><%= data.stats.cache.currentKeyCount %></span>
                                                    <label>Calls</label>
                                                    <span><span><%= data.stats.cache.totalRequests %></span> | <%= data.stats.cache.totalMiss %> (<%= data.stats.cache.missPercent %>) miss</span>
                                                    <label>Call Rate</label>
                                                    <span><%= data.stats.cache.requestRate %>/10min</span>
                                                </div>
                                                <div class="text-left py-2">
                                                        <span class="has-tooltip">
                                                            <span style="margin-top:30px; margin-left: -25em"
                                                                  class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2'>
                                                                <div>Number of cache requests for each type of cacheable item.</div>
                                                                <div class="mb-2"><b>Miss</b> means the cache was empty and data had to be fully acquired/processed.</div>
                                                                <div class="stats three">
                                                                    <label>Author</label>
                                                                    <span><%= data.stats.cache.types.author.requests %> | <%= data.stats.cache.types.author.miss %> (<%= data.stats.cache.types.author.missPercent %>) miss</span>
                                                                    <span>
                                                                        - Results from <span class="font-mono">window</span> criteria.
                                                                    </span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.author.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.author.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>
                                                                    <label class="newRow">Author Criteria</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.authorCrit.requests %> | <%= data.stats.cache.types.authorCrit.miss %> (<%= data.stats.cache.types.authorCrit.missPercent %>) miss</span>
                                                                    <span class="newRow">
                                                                        - <span class="font-mono">authorIs</span> results
                                                                    </span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.authorCrit.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.authorCrit.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>

                                                                    <label class="newRow">Item Criteria</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.itemCrit.requests %> | <%= data.stats.cache.types.itemCrit.miss %> (<%= data.stats.cache.types.itemCrit.missPercent %>) miss</span>
                                                                    <span class="newRow">
                                                                        - <span class="font-mono">itemIs</span> results
                                                                    </span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.itemCrit.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.itemCrit.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>

                                                                    <label class="newRow">Subreddit Criteria</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.subredditCrit.requests %> | <%= data.stats.cache.types.subredditCrit.miss %> (<%= data.stats.cache.types.subredditCrit.missPercent %>) miss</span>
                                                                    <span class="newRow">
                                                                        - <span class="font-mono">SubredditState</span> results
                                                                    </span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.subredditCrit.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.subredditCrit.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>

                                                                    <label class="newRow">Comment Check</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.commentCheck.requests %> | <%= data.stats.cache.types.commentCheck.miss %> (<%= data.stats.cache.types.commentCheck.missPercent %>) miss</span>
                                                                    <span class="newRow">
                                                                        - <span class="font-mono">cacheUserResult</span> results
                                                                    </span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.commentCheck.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.commentCheck.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>

                                                                    <label class="newRow">Submissions</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.submission.requests %> | <%= data.stats.cache.types.submission.miss %> (<%= data.stats.cache.types.submission.missPercent %>) miss</span>
                                                                    <span class="newRow"></span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.submission.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.submission.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>

                                                                    <label class="newRow">Comments</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.comment.requests %> | <%= data.stats.cache.types.comment.miss %> (<%= data.stats.cache.types.comment.missPercent %>) miss</span>
                                                                    <span class="newRow"></span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.comment.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.comment.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>

                                                                    <label class="newRow">Subreddits</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.subreddit.requests %> | <%= data.stats.cache.types.subreddit.miss %> (<%= data.stats.cache.types.subreddit.missPercent %>) miss</span>
                                                                    <span class="newRow"></span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.subreddit.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.subreddit.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>

                                                                    <label class="newRow">Content</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.content.requests %> | <%= data.stats.cache.types.content.miss %> (<%= data.stats.cache.types.content.missPercent %>) miss</span>
                                                                    <span class="newRow">
                                                                        - footer/comment/ban/message content.
                                                                    </span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.content.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.content.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>

                                                                    <label class="newRow">UserNote</label>
                                                                    <span class="newRow"><%= data.stats.cache.types.userNotes.requests %> | <%= data.stats.cache.types.userNotes.miss %> (<%= data.stats.cache.types.userNotes.missPercent %>) miss</span>
                                                                    <span class="newRow"></span>
                                                                    <label>Avgs</label>
                                                                    <span>Hits/Key <%= data.stats.cache.types.userNotes.identifierAverageHit %> | Hit Interval <%= data.stats.cache.types.userNotes.averageTimeBetweenHits %>s</span>
                                                                    <span>
                                                                    </span>
                                                                </div>
                                                            </span>
                                                            <span class="font-semibold underline" style="text-decoration-style: dotted">Calls Breakdown</span>
                                                        </span>
                                                    <span class="has-tooltip">
                                                                <span style="margin-top:30px; margin-left:-15em;"
                                                                      class='tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2'>
                                                                    <div>
                                                                        Some tips/tricks for cache:
                                                                    </div>
                                                                    <ul class="list-inside list-disc space-y-2">
                                                                        <li>Only need to pay attention to caching if a subreddit uses the API/cache heavily IE high-volume comment checks or very large check sets for submissions -- check <b>Calls</b> rate</li>
                                                                        <li>Cache misses are roughly 1 to 1 with making an API call -- IE reducing cache miss by 1 reduces api calls by 1.</li>
                                                                        <li>Re-using <span
                                                                                    class="font-mono">window,authorIs,</span> and <span
                                                                                    class="font-mono">itemIs</span> values in configuration will enable the bot to re-use these results and reduce cache misses</li>
                                                                        <li>A high miss % can indicate that above values are not being re-used, TTLs are not long enough, or most items are are new which means the cache can't be used efficiently.</li>
                                                                        <li>Increasing TTL will reduce cache misses at the expense of a larger cache and stale results</li>
                                                                    </ul>
                                                                </span>
                                                                <span>
                                                                    <svg xmlns="http://www.w3.org/2000/svg"
                                                                         class="h-4 w-4 inline-block cursor-help"
                                                                         fill="none"
                                                                         viewBox="0 0 24 24" stroke="currentColor">
                                                                        <use xlink:href="public/questionsymbol.svg#q" />
                                                                    </svg>
                                                                </span>
                                                        </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <br/>
                            <div class="flex items-center justify-between flex-wrap">
                                <div class="inline-flex items-center runBotOnThing">
                                    <div class="relative" style="width:550px; display: inline-block;">
                                    <input data-subreddit="<%= data.name %>"
                                           style="width: 100%;"
                                           class="border-gray-50 placeholder-gray-500 rounded mt-2 mb-3 p-2 text-black checkUrl"
                                           placeholder="<%= data.name === 'All' ? 'Run Bot on a permalink from any moderated Subreddit' : `Run Bot on a permalink using this Subreddit's config` %>"/>
                                        <div class="absolute inset-y-0 right-0 flex items-center">
                                            <select id="delayOption" name="delayOption" class="py-0 pl-2 pr-1 outline-0 focus:outline-0 focus:shadow-none border-transparent bg-white text-gray-500 sm:text-sm">
                                                <option value="asis">As-Is</option>
                                                <option value="disable">Disable Delays</option>
                                            </select>
                                        </div>
                                    </div>
                                    <a class="hover:bg-gray-700 pointer-events-none opacity-20 no-underline rounded-md mx-4 py-2 px-3 border checkActions dryRunCheck" data-subreddit="<%= data.name %>" href="">Dry Run</a>
                                    <a class="hover:bg-gray-700 pointer-events-none opacity-20 no-underline rounded-md py-2 px-3 border checkActions runCheck" data-subreddit="<%= data.name %>" href="">Run</a>
                                </div>
                                <%- include('partials/logSettings') %>
                            </div>
                            <%- include('partials/loadingIcon') %>
                            <div data-subreddit="<%= data.name %>" class="logs font-mono text-sm">
                                <% data.logs.forEach(function (logEntry){ %>
                                    <%- logEntry %>
                                <% }) %>
                            </div>
                        </div>
                    <% }) %>
                    <% }) %>
                </div>
                <!--<div class="w-full flex-auto flex min-h-0 overflow-auto">
                    <div class="w-full relative flex-auto">
                    </div>
                </div>-->
            </div>
        </div>
    </div>
<%- include('partials/footer') %>
</div>
<%- include('partials/instanceTabJs') %>
<%- include('partials/logSettingsJs') %>
<script src="https://unpkg.com/autolinker@3.14.3/dist/Autolinker.min.js" crossorigin="anonymous"></script>
<script src="https://unpkg.com/dayjs@1.10.7/dayjs.min.js" crossorigin="anonymous"></script>
<script src="https://unpkg.com/dayjs@1.10.7/plugin/advancedFormat.js"></script>
<script src="https://unpkg.com/dayjs@1.10.7/plugin/timezone.js"></script>
<script src="https://unpkg.com/dayjs@1.10.7/plugin/duration.js"></script>
<script src="https://unpkg.com/dayjs@1.10.7/plugin/relativeTime.js"></script>
<script src="https://unpkg.com/dayjs@1.10.7/plugin/isSameOrAfter.js"></script>
<script>
    dayjs.extend(window.dayjs_plugin_timezone)
    dayjs.extend(window.dayjs_plugin_advancedFormat)
    dayjs.extend(window.dayjs_plugin_duration)
    dayjs.extend(window.dayjs_plugin_relativeTime)
    dayjs.extend(window.dayjs_plugin_isSameOrAfter)
</script>
<script src="public/TextEncoderStream.js"></script>
<script src="public/browserBundle.js"></script>
<script src="public/logUtils.js"></script>
<script>
    window.sort = 'desc';

    const isOperator = <%= isOperator %>;
    window.isOperator = <%= isOperator %>;

    document.querySelectorAll('.action').forEach(el => {
        el.addEventListener('click', e => {
            e.preventDefault();
            const subSection = e.target.closest('div.sub');
            const actionParams = new URLSearchParams();

            actionParams.append('action', e.target.dataset.action);
            actionParams.append('subreddit', subSection.dataset.subreddit);
            actionParams.append('bot', subSection.dataset.bot);
            actionParams.append('force', e.target.dataset.force === 'true');
            actionParams.append('instance', '<%= instanceId %>');
            if(e.target.dataset.type !== undefined) {
                actionParams.append('type', e.target.dataset.type);
            }
            fetch(`/api/action?${actionParams.toString()}`);
        });
    })

    document.querySelectorAll(".checkUrl").forEach(el => {
        const toggleButtons = (e) => {
            const subFilter = `.sub[data-subreddit="${e.target.dataset.subreddit}"]`;
            const inputVal = document.querySelector(`${subFilter} .checkUrl`).value;
            if (inputVal.length > 0) {
                document.querySelectorAll(`${subFilter} .checkActions`).forEach(el => {
                    el.classList.remove('pointer-events-none', 'opacity-20');
                });
            } else {
                document.querySelectorAll(`${subFilter} .checkActions`).forEach(el => {
                    el.classList.add('pointer-events-none', 'opacity-20');
                });
            }
        }
        el.addEventListener('keyup', toggleButtons, false);
        el.addEventListener('change', toggleButtons, false);
    });

    document.querySelectorAll(".checkActions").forEach(el => {
        el.addEventListener('click', e => {
            e.preventDefault();
            const subreddit = e.target.dataset.subreddit;
            const subFilter = `.sub[data-subreddit="${subreddit}"]`;
            const urlInput = document.querySelector(`${subFilter} .checkUrl`);
            const delayOpt = document.querySelector(`${subFilter} #delayOption`).value;

            const isDryun = e.target.classList.contains('dryRunCheck');

            const subSection = e.target.closest('div.sub');
            const botSection = subSection.dataset.bot;
            const url = urlInput.value;

            const fetchUrl = `/api/check?instance=<%= instanceId %>&bot=${botSection}&url=${url}&dryRun=${isDryun ? 1 : 0}&subreddit=${subreddit}&delayOption=${delayOpt}`;
            fetch(fetchUrl);

            urlInput.value = '';
            urlInput.dispatchEvent(new Event('change'));
        });
    });

    // document.querySelectorAll('.statsToggle').forEach(el => {
    //     el.addEventListener('click', e => {
    //         const subreddit = e.target.dataset.subreddit;
    //         const statsClass = e.target.dataset.stattype;
    //
    //         e.preventDefault();
    //         document.querySelectorAll(`[data-subreddit="${subreddit}"].statsToggle`).forEach(el => {
    //             el.classList.remove('font-bold', 'no-underline', 'pointer-events-none');
    //         });
    //         e.target.classList.add('font-bold', 'no-underline', 'pointer-events-none');
    //
    //         document.querySelectorAll(`[data-subreddit="${subreddit}"].botStats`).forEach(el => {
    //             el.classList.add('hidden');
    //         });
    //
    //         document.querySelector(`[data-subreddit="${subreddit}"].botStats.${statsClass}`).classList.remove('hidden');
    //     });
    // })

    document.querySelectorAll('[data-bot].tabSelect').forEach(el => {
        el.addEventListener('click', e => {
            const bot = e.target.dataset.bot;
            e.preventDefault();
            document.querySelectorAll('.tabSelect').forEach(el => {
                el.classList.remove('font-bold', 'no-underline', 'pointer-events-none');
            });
            document.querySelectorAll('[data-subreddit].sub').forEach(el => {
                el.classList.remove('active');
            });
            e.target.classList.add('font-bold', 'no-underline', 'pointer-events-none');
            const firstSub = document.querySelectorAll(`[data-bot="${bot}"].sub`)[0];
            firstSub.classList.add('active');

            let firstSubWrapper;
            const firstSubTab = document.querySelector(`ul[data-bot="${bot}"] [data-subreddit="${firstSub.dataset.subreddit}"].tabSelect`);
            if(firstSubTab !== null) {
                firstSubTab.classList.add('font-bold', 'no-underline', 'pointer-events-none');
                firstSubWrapper = firstSubTab.closest('.tabSelectWrapper');
                //document.querySelector(`[data-subreddit="${subreddit}"][data-bot="${bot}"].sub`).classList.add('active');
            }

            document.querySelectorAll('.tabSelectWrapper').forEach(el => {
                el.classList.remove('border-2');
                el.classList.add('border');
            })

            if(firstSubWrapper !== undefined) {
                firstSubWrapper.classList.remove('border');
                firstSubWrapper.classList.add('border-2');
            }

            document.querySelectorAll('[data-bot].subreddit.nestedTabs').forEach(el => {
                el.classList.remove('active');
            })
            const nested = document.querySelector(`[data-bot="${bot}"].subreddit.nestedTabs`);
            if(nested !== null) {
                nested.classList.add('active');
            }

            const wrapper = e.target.closest('.tabSelectWrapper');//document.querySelector(`[data-subreddit="${subreddit}"].tabSelectWrapper`);
            wrapper.classList.remove('border');
            wrapper.classList.add('border-2');

            // special case for system
            if(bot === 'system') {
                document.querySelector('[data-bot="system"].sub').classList.add('seen');
            }

            if ('URLSearchParams' in window) {
                var searchParams = new URLSearchParams(window.location.search)
                searchParams.set("bot", bot);
                if(firstSub.dataset.subreddit !== undefined) {
                    searchParams.set("sub", firstSub.dataset.subreddit);
                }
                var newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();
                history.pushState(null, '', newRelativePathQuery);
            }
        });
    });

    document.querySelectorAll('[data-subreddit].tabSelect').forEach(el => {
        el.addEventListener('click', e => {
            const bot = e.target.closest('ul').dataset.bot;
            const subreddit = e.target.dataset.subreddit;
            e.preventDefault();
            document.querySelectorAll('[data-subreddit].tabSelect').forEach(el => {
                el.classList.remove('font-bold', 'no-underline', 'pointer-events-none');
            });
            document.querySelectorAll('[data-subreddit].sub').forEach(el => {
                el.classList.remove('active');
            });
            e.target.classList.add('font-bold', 'no-underline', 'pointer-events-none');
            document.querySelector(`[data-subreddit="${subreddit}"][data-bot="${bot}"].sub`).classList.add('active');

            document.querySelectorAll('[data-subreddit].tabSelectWrapper').forEach(el => {
                el.classList.remove('border-2');
                el.classList.add('border');
            })

            const wrapper = e.target.closest('.tabSelectWrapper');//document.querySelector(`[data-subreddit="${subreddit}"].tabSelectWrapper`);
            wrapper.classList.remove('border');
            wrapper.classList.add('border-2');

            if ('URLSearchParams' in window) {
                var searchParams = new URLSearchParams(window.location.search)
                searchParams.set("sub", e.target.dataset.subreddit);
                var newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();
                history.pushState(null, '', newRelativePathQuery);
            }
            const activeSub = document.querySelector(`[data-subreddit="${subreddit}"][data-bot="${bot}"].sub`);
            if(window.socket !== undefined) {
                window.socket.emit('viewing', {bot, subreddit});
            }
        });
    });

    let recentlySeen = new Map();


    function getLogBlock(bot, subreddit) {

        console.debug(`Getting initial logs for ${bot} ${subreddit}`);

        level = document.querySelector(`[data-subreddit="${subreddit}"] [data-type="level"]`).value;
        sort = document.querySelector(`[data-subreddit="${subreddit}"] [data-type="sort"]`).value;
        limitSel = document.querySelector(`[data-subreddit="${subreddit}"] [data-type="limit"]`).value;

        return new Promise((resolve, reject) => {
            fetch(`/api/logs?instance=<%= instanceId %>&bot=${bot}&subreddit=${subreddit}&level=${level}&sort=${sort}&limit=${limitSel}&stream=false&formatted=false`).then((resp) => {
                if (!resp.ok) {
                    console.error('Response was not OK from logs GET');
                    reject('Response was not OK from logs GET');
                } else {
                    resp.json().then((data) => {
                        const logContainer = document.querySelector(`.sub[data-bot="${bot}"] .logs[data-subreddit="${subreddit}"]`);
                        const logLines = (subreddit.toLowerCase() === 'all' ? data[0].all : data[0].subreddits[0].logs).map(x => {
                            const logObj = window.formatLog(x);
                            let fString = logObj[window.beam.MESSAGE];
                            if(x.bot !== undefined) {
                                fString = fString.replace(`~${x.bot}~ `, '');
                            }
                            if(x.subreddit !== undefined && subreddit !== 'All') {
                                fString = fString.replace(`{${x.subreddit}} `, '');
                            }
                            return window.formatLogLineToHtml(fString, x.timestamp)
                        }).join('');
                        logContainer.insertAdjacentHTML('afterbegin', logLines);
                        console.debug(`Done with initial logs for ${bot} ${subreddit}`);
                        resolve();
                        //activeSub.classList.add('seen');
                    });
                }
            }).catch((err) => {
                console.log(err);
                reject(err);
            });
        });
    }

    // https://stackoverflow.com/a/66394121/1469797
    function onVisible(element, callback) {
        new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if(entry.intersectionRatio > 0) {
                    callback(element);
                    //observer.disconnect();
                }
            });
        }).observe(element);
    }

    function getStreamingLogs(sub, bot) {

        console.debug(`Getting stream for ${bot} ${sub}`);

        level = document.querySelector(`[data-subreddit="${sub}"] [data-type="level"]`).value;
        sort = document.querySelector(`[data-subreddit="${sub}"] [data-type="sort"]`).value;
        limitSel = document.querySelector(`[data-subreddit="${sub}"] [data-type="limit"]`).value;

        const logContainer = document.querySelector(`.sub[data-bot="${bot}"] .logs[data-subreddit="${sub}"]`);

        let textBuffer = '';

        var controller = new AbortController();
        var signal = controller.signal;

        let lastFlush;
        let bufferTimeout;

        let bufferedLogs = [];

        const formattedMsg = (x) => {
            const logObj = window.formatLog(x);
            let fString = logObj[window.beam.MESSAGE];
            if(x.bot !== undefined) {
                fString = fString.replace(`~${x.bot}~ `, '');
            }
            if(x.subreddit !== undefined && sub !== 'All') {
                fString = fString.replace(`{${x.subreddit}} `, '');
            }
            return window.formatLogLineToHtml(fString, x.timestamp);
        }

        const flushLogs = () => {
            let existingLogs;

            //const el = document.querySelector(`[data-subreddit="${sub}"][data-bot="${bot}"].sub`);
            //const logContainer = el.querySelector(`.logs`);

            if(window.sort === 'desc' || window.sort === 'descending') {
                bufferedLogs.forEach((l) => {
                    logContainer.insertAdjacentHTML('afterbegin', formattedMsg(l));
                })
                existingLogs = Array.from(logContainer.querySelectorAll(`.logLine`));
                logContainer.replaceChildren(...existingLogs.slice(0, limitSel));
            } else {
                bufferedLogs.forEach((l) => {
                    logContainer.insertAdjacentHTML('beforeend', formattedMsg(l));
                    existingLogs = Array.from(logContainer.querySelectorAll(`.logLine`));
                    const overLimit = limitSel - existingLogs.length;
                    logContainer.replaceChildren(...existingLogs.slice(overLimit -1, limitSel));
                })
            }
            lastFlush = Date.now();
            bufferedLogs = [];
        }

        const fetchPromise = fetch(`/api/logs?instance=<%= instanceId %>&bot=${bot}&subreddit=${sub}&level=${level}&sort=${sort}&limit=${limitSel}&stream=true&streamObjects=true&formatted=false`, {signal})
            .then(response => response.body)
            .then(rs =>
                rs.pipeThrough(new TextDecoderStream())
                    .pipeThrough(new TransformStream({
                        transform(chunk, controller) {
                            textBuffer += chunk;
                            const lines = textBuffer.split('\n');
                            for (const line of lines.slice(0, -1)) {
                                controller.enqueue(line);
                            }
                            textBuffer = lines.slice(-1)[0];
                        },
                        flush(controller) {
                            if (textBuffer) {
                                controller.enqueue(textBuffer);
                            }
                        }
                    }))

                    // Parse JSON objects
                    .pipeThrough(new TransformStream({
                        transform(line, controller) {
                            if (line) {
                                controller.enqueue(
                                    JSON.parse(line)
                                );
                            }
                        }
                    }))
            ).catch((e) => {
                console.warn(e);
            });

        fetchPromise.then(async res => {
            // can potentially happen if request is aborted (by immediate log cancel) before logs begin to be read
            if(res === undefined) {
                return;
            }
            const reader = res.getReader();
            let keepReading = true;
            while(keepReading) {
                const {done, value, ...rest} = await reader.read();
                if(done) {
                    keepReading = false;
                    console.debug(`${bot}.${sub} log stream reader signalled it is done`);
                }
                if(value) {
                    //console.log(`((Logged For ${bot} ${sub})) ${value.message}`);

                    bufferedLogs.push(value);

                    if(lastFlush !== undefined && bufferTimeout !== undefined && ((Date.now() - lastFlush)/1000) > 3) {
                        //console.log('Immediate flush');
                        clearTimeout(bufferTimeout);
                        bufferTimeout = undefined;
                        flushLogs();
                    } else {
                        //console.log('Using timeout');
                        clearTimeout(bufferTimeout);
                        bufferTimeout = setTimeout(() => {flushLogs();}, 1000);
                    }
                }
            }
            /*                function read() {
                                reader.read().then(({done, value}) => {
                                    if(done) {
                                        console.log('done');
                                        return;
                                    }
                                    if(value) {
                                        console.log(value);
                                        read();
                                    }
                                });
                            }
                            read();*/
        }).catch((e) => {
            if(e.name !== 'AbortError') {
                console.debug(`Non-abort error occurred while streaming logs for ${bot} ${sub}`);
                console.error(e);
            } else {
                console.debug(`Log streaming for ${bot} ${sub} aborted`);
            }
        });

        const existing = recentlySeen.get(`${bot}.${sub}`) || {};
        recentlySeen.set(`${bot}.${sub}`, {...existing, fetch: fetchPromise, controller, streamStart: Date.now()});
    }

    const delayedItemsMap = new Map();
    let lastSeenIdentifier = null;
    const subIndicators = ['red', 'green', 'yellow'];

    function updateOpStats(resp, responseType) {
        for (const b of resp) {
            const {
                name,
                data: {
                    running,
                    indicator,
                    subreddits = [],
                } = {},
            } = b;
            const botTab = document.querySelector(`[data-bot="${name}"] .botTabStatus`);
            if (botTab !== null) {
                if (running !== undefined) {
                    const currentStatusClass = `bg-${running ? 'green' : 'red'}-400`;
                    const oppositeStatusClass = `bg-${running ? 'red' : 'green'}-400`;
                    if (!botTab.classList.contains(currentStatusClass)) {
                        botTab.classList.remove(oppositeStatusClass);
                        botTab.classList.add(currentStatusClass);
                    }
                }
            }
            for (const subData of subreddits) {
                const subredditTab = document.querySelector(`[data-bot="${name}"] [data-subreddit="${subData.name}"] .subredditTabStatus`);
                if (subredditTab !== null) {
                    const currentSubIndicatorClass = `bg-${subData.indicator}-400`;
                    const nonSubIndicatorClasses = subIndicators.filter(x => x !== subData.indicator).map(x => `bg-${x}-400`);
                    if (!subredditTab.classList.contains(currentSubIndicatorClass)) {
                        for (const nonIndicator of nonSubIndicatorClasses) {
                            subredditTab.classList.remove(nonIndicator);
                        }
                        subredditTab.classList.add(currentSubIndicatorClass);
                    }
                }
            }
        }
    }

    function updateLiveStats(resp, sub, bot, responseType) {
        let el;
        let isAll = sub.toLowerCase() === 'all';
        if(isAll) {
            // got all
            el = document.querySelector(`[data-subreddit="All"][data-bot="${bot}"].sub`);
        } else {
            // got subreddit
            el = document.querySelector(`[data-subreddit="${sub}"].sub`);
        }

        const {
            system: {
                running
            } = {},
            delayedItems,
            guests,
            runningActivities,
            queuedActivities,
            permissions,
            stats: {
                historical: {
                    eventsCheckedTotal,
                    checksTriggeredTotal,
                    rulesTriggeredTotal,
                    actionsRunTotal,
                } = {},
            } = {},
            checks: {
              comments,
              submissions
            } = {},
            pollingInfo,
        } = resp;

        if(running !== undefined) {
            if(resp.system.running && el.classList.contains('offline')) {
                el.classList.remove('offline');
            } else if(!resp.system.running && !el.classList.contains('offline')) {
                el.classList.add('offline');
            }
        }

        if(runningActivities !== undefined) {
            el.querySelector('.runningActivities').innerHTML = resp.runningActivities;
        }
        if(queuedActivities !== undefined) {
            el.querySelector('.queuedActivities').innerHTML = resp.queuedActivities;
        }

        if(delayedItems !== undefined) {
            let items = [];
            if(responseType === 'full') {
                delayedItemsMap.clear();
                for(const i of delayedItems) {
                    delayedItemsMap.set(i.id, i);
                }
                items = delayedItems;
            } else {
                for(const n of delayedItems.new) {
                    delayedItemsMap.set(n.id, n);
                }
                for(const n of delayedItems.removed) {
                    delayedItemsMap.delete(n);
                }
                items = Array.from(delayedItemsMap.values());
            }
            el.querySelector('.delayedItemsCount').innerHTML = items.length;
            el.querySelector('.delayedItemsList').innerHTML = 'No delayed Items!';
            if(items.length > 0) {
                el.querySelector('.delayedItemsList').innerHTML = '';
                const now = dayjs();
                const sorted = items.map(x => ({...x, queuedAtUnix: x.queuedAt, queuedAt: dayjs.unix(x.queuedAt), dispatchAt: dayjs.unix(x.queuedAt + x.duration)}));
                sorted.sort((a, b) => {
                    return a.dispatchAt.isSameOrAfter(b.dispatchAt) ? 1 : -1
                });
                const delayedItemDivs = sorted.map(x => {
                    const diffUntilNow = x.dispatchAt.diff(now);
                    const durationUntilNow = dayjs.duration(diffUntilNow, 'ms');
                    const queuedAtDisplay = x.queuedAt.format('HH:mm:ss z');
                    const durationDayjs = dayjs.duration(x.duration, 'seconds');
                    const durationDisplay = durationDayjs.humanize();
                    const cancelLink = `<a href="#" data-id="${x.id}" data-subreddit="${x.subreddit}" class="delayCancel">CANCEL</a>`;
                    return `<div>A <a href="https://reddit.com${x.permalink}">${x.submissionId !== undefined ? 'Comment' : 'Submission'}</a>${isAll ? ` in <a href="https://reddit.com${x.subreddit}">${x.subreddit}</a> ` : ''} by <a href="https://reddit.com/u/${x.author}">${x.author}</a> queued by ${x.source} at ${queuedAtDisplay} for ${durationDisplay} (dispatches ${durationUntilNow.humanize(true)}) -- ${cancelLink}</div>`;
                });
                //let sub = resp.name;
                if(sub === 'All') {
                    sub = sorted.reduce((acc, curr) => {
                        if(!acc.includes(curr.subreddit)) {
                            return acc.concat(curr.subreddit);
                        }
                        return acc;
                    },[]).join(',');
                }
                delayedItemDivs.unshift(`<div><a href="#"data-subreddit="${sub}" class="delayCancelAll">Cancel ALL</a></div>`)
                el.querySelector('.delayedItemsList').insertAdjacentHTML('afterbegin', delayedItemDivs.join(''));
                el.querySelectorAll('.delayedItemsList .delayCancel').forEach(elm => {
                    elm.addEventListener('click', e => {
                        e.preventDefault();
                        const id = e.target.dataset.id;
                        const subreddit = e.target.dataset.subreddit;
                        fetch(`/api/delayed?instance=<%= instanceId %>&bot=${bot}&subreddit=${subreddit}&id=${id}`, {
                            method: 'DELETE'
                        }).then((resp) => {
                            if (!resp.ok) {
                                console.error('Response was not OK from delay cancel');
                            } else {
                                console.log('Removed ok');
                            }
                        });
                    });
                });
                el.querySelectorAll('.delayedItemsList .delayCancelAll').forEach(elm => {
                    elm.addEventListener('click', e => {
                        e.preventDefault();
                        const subreddit = e.target.dataset.subreddit;
                        deleteDelayedActivities(bot, subreddit);

                        /*fetch(`/api/delayed?instance=<%= instanceId %>&bot=${bot}&subreddit=${subreddit}`, {
                        method: 'DELETE'
                    }).then((resp) => {
                        if (!resp.ok) {
                            console.error('Response was not OK from delay cancel ALL');
                        } else {
                            console.log('Removed ALL ok');
                        }
                    });*/
                    });
                });
            }
        }

        if(guests !== undefined) {
            renderGuestMods(bot, sub, guests);
        }

        if(eventsCheckedTotal !== undefined) {
            el.querySelector('.allStats .eventsCount').innerHTML = resp.stats.historical.eventsCheckedTotal;
        }
        if(checksTriggeredTotal !== undefined) {
            el.querySelector('.allStats .checksCount').innerHTML = resp.stats.historical.checksTriggeredTotal;
        }
        if(rulesTriggeredTotal !== undefined) {
            el.querySelector('.allStats .rulesCount').innerHTML = resp.stats.historical.rulesTriggeredTotal;
        }
        if(actionsRunTotal !== undefined) {
            el.querySelector('.allStats .actionsCount').innerHTML = resp.stats.historical.actionsRunTotal;
        }

        if(isAll) {
            for(const elm of ['apiAvg','apiLimit','apiDepletion','nextHeartbeat', 'nextHeartbeatHuman', 'limitReset', 'limitResetHuman', 'nannyMode', 'startedAtHuman']) {
                if(resp[elm] !== undefined) {
                    el.querySelector(`#${elm}`).innerHTML = resp[elm];
                }
            }

            if(running !== undefined) {
                el.querySelector(`.botStatus`).innerHTML = resp.system.running ? 'ONLINE' : 'OFFLINE';
            }
        } else {
            if(permissions !== undefined) {
                if(el.querySelector('.modPermissionsCount').innerHTML != resp.permissions.length) {
                    el.querySelector('.modPermissionsCount').innerHTML = resp.permissions.length;
                    el.querySelector('.modPermissionsList').innerHTML = '';
                    el.querySelector('.modPermissionsList').insertAdjacentHTML('afterbegin', resp.permissions.map(x => `<li class="font-mono">${x}</li>`).join(''));
                }
            }

            for(const elm of ['botState', 'queueState', 'eventsState']) {
                if(resp[elm] !== undefined) {
                    const state = resp[elm];
                    el.querySelector(`.${elm}`).innerHTML = `${state.state}${state.causedBy === 'system' ? '' : ' (user)'}`;
                }
            }
            for(const elm of ['startedAt', 'startedAtHuman', 'wikiLastCheck', 'wikiLastCheckHuman', 'wikiRevision', 'wikiRevisionHuman', 'validConfig', 'delayBy']) {
                if(resp[elm] !== undefined) {
                    el.querySelector(`.${elm}`).innerHTML = resp[elm];
                }
            }
            if(comments !== undefined) {
                el.querySelector(`.commentCheckCount`).innerHTML = resp.checks.comments;
            }
            if(submissions !== undefined) {
                el.querySelector(`.submissionCheckCount`).innerHTML = resp.checks.submissions;
            }

            if(pollingInfo !== undefined) {
                const newInner = resp.pollingInfo.map(x => `<li>${x}</li>`).join('');
                if(el.querySelector(`.pollingInfo`).innerHTML !== newInner) {
                    el.querySelector(`.pollingInfo`).innerHTML = newInner;
                }
            }
        }
    }

    function deleteDelayedActivities(bot, subredditStr, id) {
        const subs = subredditStr.split(',');
        fetch(`/api/delayed?instance=<%= instanceId %>&bot=${bot}&subreddit=${subs[0]}${id !== undefined ? `&id=${id}` : ''}`, {
            method: 'DELETE'
        }).then((resp) => {
            if (!resp.ok) {
                if(id === undefined) {
                    console.error(`Response was not OK from ${subs[0]} delay ALL cancel`);
                } else {
                    console.error(`Response was not OK from ${subs[0]} delay cancel ${id}`);
                }
            } else {
                if(id === undefined) {
                    console.log(`Removed ALL for ${subs[0]} ok`);
                } else {
                    console.log(`Removed ${id} for ${subs[0]} ok`);
                }
                if(subs.length > 1) {
                    deleteDelayedActivities(bot, subs.slice(1).join(','));
                }
            }
        });
    }

    function removeGuestMod(bot, subredditStr, name) {
        const subs = subredditStr.split(',');
        fetch(`/api/guests?instance=<%= instanceId %>&bot=${bot}&subreddit=${subs[0]}&name=${name}`, {
            method: 'DELETE'
        }).then((resp) => {
            if (!resp.ok) {
                throw new Error(`Response was not OK from ${subs[0]} remove guest ${id}${name}`)
            } else {
                return resp.json();
            }
        }).then((data) => {
            renderGuestMods(bot, subs[0], data);
        });
    }

    function addGuestMod(bot, subredditStr, name, time) {
        const subs = subredditStr.split(',');
        fetch(`/api/guests?instance=<%= instanceId %>&bot=${bot}&subreddit=${subs[0]}&time=${time}&name=${name}`, {
            method: 'POST'
        }).then((resp) => {
            if (!resp.ok) {
                throw new Error(`Response was not OK from ${subs[0]} add guest ${name}`);
            } else {
                return resp.json();
            }
        }).then((data) => {
            renderGuestMods(bot, subs[0], data);
            document.querySelector(`[data-bot="${bot}"][data-subreddit="${subs[0]}"] .guestAddName`).value = '';
            //document.querySelector(`[data-bot="${bot}"][data-subreddit="${subs[0]}"] .guestAddTime`).value = dayjs().add(1, 'minutes').format('YYYY-MM-DDTHH:mm');
        });
    }

    function renderGuestMods(bot, sub, data) {
        let el;
        let isAll = sub.toLowerCase() === 'all';
        if(isAll) {
            // got all
            el = document.querySelector(`[data-subreddit="All"][data-bot="${bot}"] .guestList`);
        } else {
            // got subreddit
            el = document.querySelector(`[data-bot="${bot}"][data-subreddit="${sub}"] .guestList`);
        }

        const now = dayjs();

        if(el !== null) {
            el.innerHTML = '';
            if(data.length === 0) {
                const node = document.createElement("LI");
                node.classList.add('smallLi');
                node.appendChild(document.createTextNode('None'));
                el.appendChild(node);
            } else {
                for(const g of data) {
                    const node = document.createElement("LI");
                    node.classList.add('smallLi');
                    let relTime = g.expiresAt === undefined ? 'Never' : dayjs.duration(dayjs(g.expiresAt).diff(now)).humanize();
                    let guestText = g.name;
                    if(isAll) {
                        guestText += ` (${g.subreddits.length} Subs, at least ${relTime})`;
                    } else {
                        guestText += ` (${relTime})`;
                    }
                    node.appendChild(document.createTextNode(guestText));
                    node.insertAdjacentHTML('beforeend', `<a href="" class="remove ml-1" data-name="${g.name}"><span class="cancellable iconify-inline" data-icon="icons8:cancel"></span></a>`);
                    node.addEventListener('click', e => {
                        e.preventDefault();
                        removeGuestMod(bot, sub, g.name);
                    });
                    el.appendChild(node);
                }
            }
        }
    }

    document.querySelectorAll('.addGuest').forEach(elm => {
        elm.addEventListener('click', (e) => {
            e.preventDefault();
            const el = e.target;
            const parent = el.closest('.sub');
            const sub = parent.dataset.subreddit;
            const bot = parent.dataset.bot;

            const userEl = el.parentElement.querySelector('input.guestAddName');
            const timeEl = el.parentElement.querySelector('input.guestAddTime');

            const d = dayjs(timeEl.value);
            // don't allow users to set a time before now
            const time = d.isBefore(dayjs()) ? dayjs().add(1, 'minute').valueOf() : d.valueOf();
            const user = userEl.value;

            console.log(`Adding ${user} expiring at ${time} to ${bot}.${sub}`);

            addGuestMod(bot, sub, user, time)
        });
    });

    function getOpStats(responseType = 'full') {
        console.debug(`Getting op live stats for <%= instanceId %>`)
        return fetch(`/api/stats?instance=<%= instanceId %>&type=${responseType}`)
            .then(response => {
                if(response.status === 304) {
                    return Promise.resolve(false);
                }
                return response.json();
            })
            .then(resp => {
                if(resp === false) {
                    return;
                }
                updateOpStats(resp, responseType);
            });
    }

    function getLiveStats(bot, sub, responseType = 'full') {
        console.debug(`Getting live stats for ${bot} ${sub}`)
        return fetch(`/api/liveStats?instance=<%= instanceId %>&bot=${bot}&subreddit=${sub}&type=${responseType}`)
            .then(response => {
                if(response.status === 304) {
                    return Promise.resolve(false);
                }
                return response.json();
            })
            .then(resp => {
                if(resp === false) {
                    return;
                }
                updateLiveStats(resp, sub, bot, responseType);
            });
    }

    function onSubVisible (bot, sub) {
        const identifier = `${bot}.${sub}`
        lastSeenIdentifier = identifier;

        console.debug(`Focused on ${identifier}`);

        let immediateCancel = [];
        const notNew = Array.from(recentlySeen.entries()).filter(([k,v]) => k !== identifier);
        // browsers have a default limit for number of concurrent connections
        // which INCLUDES streaming responses (logs)
        // so we need to keep number of idle streaming logs low to prevent browser from hanging on new requests
        if(notNew.length > 2) {
            notNew.sort((a, b) =>  a[1].streamStart - b[1].streamStart);
            immediateCancel = notNew.slice(2).map(x => x[0]);
            console.debug(`More than 2 other views are still streaming logs! Will immediately stop the oldest (skipping two earliest): ${immediateCancel.join(' , ')}`);
        }

        recentlySeen.forEach((value, key) => {
            const {timeout, liveStatsInt,...rest} = value;
            if(key === identifier && timeout !== undefined) {

                console.debug(`${key} Clearing unfocused timeout on own already set`);
                clearTimeout(timeout);
                recentlySeen.set(key, rest);

            } else if(key !== identifier) {

                // stop live stats for tabs we are not viewing
                clearInterval(liveStatsInt);

                if(immediateCancel.includes(key)) {
                    const {controller} = value;
                    if(controller !== undefined) {
                        console.debug(`${key} Stopping logs IMMEDIATELY`);
                        controller.abort();
                        recentlySeen.delete(key);
                    }
                } else
                    // set timeout for logs we are not viewing
                if(timeout === undefined) {
                    const t = setTimeout(() => {
                        const k = key;
                        const val = recentlySeen.get(k);
                        if(val !== undefined) {
                            const {controller} = val;
                            console.debug(`${k} 15 second unfocused timeout expired, stopping log streaming`);
                            if(controller !== undefined) {
                                console.debug(`${k} Stopping logs`);
                                controller.abort();
                            }
                            recentlySeen.delete(k);
                        }
                    },15000);
                    recentlySeen.set(key, {timeout: t, liveStatsInt, ...rest});
                }
            }
        });

        if(!recentlySeen.has(identifier)) {
            getLogBlock(bot, sub).then(() => {
                getStreamingLogs(sub, bot);
            });
        }

        delayedItemsMap.clear();
        // always get live stats for tab we just started viewing
        getLiveStats(bot, sub).then(() => {
            let liveStatsInt;
            const liveStatFunc = () => {
                // after initial live stats "full frame" only request deltas to reduce data usage
                getLiveStats(bot, sub, 'delta').catch((err) => {
                    console.error(err);
                    // stop interval if live stat encounters an error
                    clearInterval(liveStatsInt);
                })
            };
            liveStatsInt = setInterval(liveStatFunc, 5000);
            const existing = recentlySeen.get(identifier) ?? {};
            recentlySeen.set(identifier, {...existing, bot, sub, liveStatsInt});
        });
    }

    document.querySelectorAll('.sub').forEach(el => {
        const sub = el.dataset.subreddit;
        const bot = el.dataset.bot;
        onVisible(el, () => onSubVisible(bot, sub));
    });

    //window.init = true;
    let opTimeoutId = null;
    let opTimeout = () => {
        getOpStats('full').then(() => {
            opTimeoutId = setInterval(() => {
                getOpStats('delta').catch((err) => {
                    console.error(err);
                    clearInterval(opTimeoutId);
                })
        }, 10000);
        });
    }

    let backgroundTimeout = null;

    document.addEventListener("visibilitychange", (e) => {
        if (document.visibilityState === "hidden") {
            console.debug(`Set 15 seconds timeout for ${lastSeenIdentifier} live data due to page not being visible`);
            backgroundTimeout = setTimeout(() => {
                console.debug(`Stopping live data for ${lastSeenIdentifier} due to page not being visible`);

                const {liveStatsInt, controller} = recentlySeen.get(lastSeenIdentifier) ?? {};
                if(liveStatsInt !== undefined && liveStatsInt !== null) {
                    clearInterval(liveStatsInt);
                }
                if(controller !== undefined && controller !== null) {
                    controller.abort();
                }
                backgroundTimeout = null;
                clearInterval(opTimeoutId);
                opTimeoutId = null;
                window.init = true;
            }, 15000);
        } else {
            // cancel real-time data timeout because page is visible again
            if(backgroundTimeout !== null) {
                console.debug(`Cancelled live-data timeout for ${lastSeenIdentifier}`);
                clearTimeout(backgroundTimeout);
                backgroundTimeout = null;
            } else if(lastSeenIdentifier !== null) {
                // if timeout is null then it was hit
                // and since we have a last seen this is what is visible to the user so restart live data for it
                const {bot, sub} = recentlySeen.get(lastSeenIdentifier) ?? {};
                if(bot !== undefined && sub !== undefined) {
                    console.debug(`Restarting live-data for ${lastSeenIdentifier} due to page being visible`);
                    recentlySeen.delete(lastSeenIdentifier);
                    onSubVisible(bot, sub);
                }
                if(opTimeoutId === null) {
                    opTimeout();
                }
            }
        }
    });

    opTimeout();

    var searchParams = new URLSearchParams(window.location.search);
    const shownSub = searchParams.get('sub') || 'All'
    let shownBot = searchParams.get('bot');
    if(shownBot === null) {
        // show the first bot listed if none is specified
        let firstBot = document.querySelector('.real.tabSelectWrapper[data-bot]');
        if(firstBot === null) {

        }
        if(firstBot !== null) {
            shownBot = firstBot.dataset.bot;
            searchParams.set('bot', shownBot);
            var newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();
            history.pushState(null, '', newRelativePathQuery);
        }
    }

    document.querySelector(`[data-bot="${shownBot}"].tabSelect`).classList.add('font-bold', 'no-underline', 'pointer-events-none');
    const tabSelect = document.querySelector(`ul[data-bot="${shownBot}"] [data-subreddit="${shownSub}"].tabSelect`);
    if(tabSelect !== null) {
        tabSelect.classList.add('font-bold', 'no-underline', 'pointer-events-none');
    }
    document.querySelectorAll('.tabSelectWrapper').forEach(el => el.classList.add('border'));
    document.querySelector(`[data-bot="${shownBot}"][data-subreddit="${shownSub}"].sub`).classList.add('active', 'seen');
    const subWrapper = document.querySelector(`ul[data-bot="${shownBot}"] [data-subreddit="${shownSub}"].tabSelectWrapper`);
    if(subWrapper !== null) {
        subWrapper.classList.remove('border');
        subWrapper.classList.add('border-2');
    }
    const wrapper = document.querySelector(`[data-bot="${shownBot}"].tabSelectWrapper`);
    if(wrapper !== null) {
        wrapper.classList.remove('border');
        wrapper.classList.add('border-2');
    }

    const nestedTabs = document.querySelector(`[data-bot="${shownBot}"].subreddit.nestedTabs`);
    if(nestedTabs !== null) {
        nestedTabs.classList.add('active');
    }

    //document.querySelectorAll('.stats.reloadStats').forEach(el => el.classList.add('hidden'));
    //document.querySelectorAll('.allStatsToggle').forEach(el => el.classList.add('font-bold', 'no-underline', 'pointer-events-none'));
</script>

<script src="https://cdn.socket.io/4.1.2/socket.io.min.js" integrity="sha384-toS6mmwu70G0fw54EGlWWeA4z3dyJ+dlXBtSURSKN4vyRFOcxd3Bzjj/AoOwY+Rg" crossorigin="anonymous"></script>
<script>

    let socket = io({
        reconnectionAttempts: 5, // bail after 5 attempts
    });
    window.socket = socket;

    // get all bots
    let bots = [];
    document.querySelectorAll(`[data-bot].sub`).forEach((el) => {
        bots.push(el.dataset.bot);
    })
    const newBufferedLogs = () => new Map([["All", []]]);
    const newBufferedBot = () => new Map([["All", []], ...bots.map(x => ([x, newBufferedLogs()]))]);


    let bufferedLogs = newBufferedLogs();
    let bufferedBot = newBufferedBot();
    let lastFlush;
    let bufferTimeout;

    socket.on("connect", () => {
        document.body.classList.add('connected')
    });

    socket.on('disconnect', () => {
        document.body.classList.remove('connected');
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intro.js/6.0.0/intro.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/public/statusTour.js"></script>
</body>
</html>
