<html lang="en">
<head>
    <link rel="stylesheet" href="/public/tailwind.min.css"/>
    <script src="https://code.iconify.design/1/1.0.4/iconify.min.js"></script>
    <link rel="stylesheet" href="/public/themeToggle.css">
    <link rel="stylesheet" href="/public/app.css">
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <% if (format === 'yaml') { %>
    <link href="/public/yaml/entry.css" rel="stylesheet">
    <% } else { %>
        <link rel="stylesheet" data-name="vs/editor/editor.main" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs/editor/editor.main.min.css">
    <% } %>
    <!--icons from https://heroicons.com -->
</head>
<body style="user-select: none;" class="bg-gray-900 text-white font-sans">
<div class="min-w-screen min-h-screen bg-gray-800">
    <%- include('partials/title') %>
    <div class="container mx-auto">
        <div class="grid">
            <div class="my-3 pl-2">
                Schema <a href="#" data-schema="subreddit" class="schemaType" id="subredditSchemaType">Subreddit</a> / <a href="#" data-schema="operator" class="schemaType" id="operatorSchemaType">Operator</a>
                | Format <a href="#" class="formatType" data-format="json" id="formatJson">JSON</a> / <a href="#" class="formatType" data-format="yaml" id="formatYaml">YAML</a>
                |
                <span class="has-tooltip">
                    <span style="z-index:999; margin-top: 30px;" class='tooltip rounded shadow-lg p-3 bg-gray-100 text-black space-y-2'>
                       <div>Copy + paste your configuration here to get:</div>
                        <ul class="list-inside list-disc">
                            <li>
                                formatting (right click for menu)
                            </li>
                            <li>
                                JSON syntax assist (red squiggly, hover for info)
                            </li>
                            <li>
                                annotated properties (hover for info)
                            </li>
                            <li id="schemaTypeList"></li>
                        </ul>
                        <div>When done editing hit Ctrl+A (Command+A on macOS) to select all text, then copy + paste back into your wiki/file</div>
                    </span>
                    <span class="cursor-help">
                            How To Use
                        <span>
                            <svg xmlns="http://www.w3.org/2000/svg"
                                 class="h-4 w-4 inline-block cursor-help"
                                 fill="none"
                                 viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round"
                                      stroke-linejoin="round"
                                      stroke-width="2"
                                      d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </span>
                    </span>
                </span>
                | <input id="configUrl" class="text-black placeholder-gray-500 rounded mx-2" style="min-width:400px;" placeholder="URL of a config to load"/> <a href="#" id="loadConfig">Load</a>
                <div id="editWrapper" class="my-2">
                    <label style="display: none" for="reason">Edit Reason</label><input id="reason" class="text-black placeholder-gray-500 rounded mr-2" style="min-width:400px;" placeholder="Edit Reason: Updated through CM Web"/>
                    <span id="saveTip">
                    <span style="margin-top:30px; z-index:100" class="tooltip rounded shadow-lg p-1 bg-gray-100 text-black -mt-2 space-y-3 p-2 text-left">
                        <div>In order to <strong id="configPageActionType">save</strong> a configuration to a subreddit's wiki page you must re-authorize ContextMod with Reddit to get the following permissions:</div>
                        <ul class="list-inside list-disc" id="reauthPermissions">
                            <li><span class="font-mono">wikiedit</span></li>
                        </ul>
                        <div>CM will store this permission for one hour after which you must re-authorize again to save.</div>
                        <div><b><a href="#" id="doAuthorize">Click Here to re-authorize</a></b></div>
                    </span>
                    <span>
                        <a id="doSave">Save</a>
                        <svg id="saveQuestionIcon" xmlns="http://www.w3.org/2000/svg"
                             class="h-4 w-4 inline-block cursor-help"
                             fill="none"
                             viewBox="0 0 24 24" stroke="currentColor">
                            <use xlink:href="public/questionsymbol.svg#q" />
                        </svg>
                    </span>
                </span>
                </div>
                <div id="error" class="font-semibold"></div>
                <select style="display:none;" id="schema-selection">
                    <option value="bot.yaml">Bot Configuration</option>
                </select>
                <div style="display:none;" id="breadcrumbs"></div>
            </div>
            <div style="min-height: 80vh" id="editor"></div>
            <div style="user-select: auto" id="problems"></div>
        </div>
    </div>
    <%- include('partials/footer') %>
</div>
<script>
    var searchParams = new URLSearchParams(window.location.search);

    let schemaType;
    let schemaFile;
    if (searchParams.get('schema') === 'operator') {
        window.schemaType = 'operator';
        window.schemaFile = 'OperatorConfig.json';
        document.querySelector('#schemaTypeList').innerHTML = 'automatic validation of your OPERATOR configuration (yellow squiggly)';
        document.querySelector('#operatorSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    } else {
        window.schemaType = 'subreddit';
        window.schemaFile = 'App.json';
        document.querySelector('#schemaTypeList').innerHTML = 'automatic validation of your SUBREDDIT configuration (yellow squiggly)'
        document.querySelector('#subredditSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    }

    if (searchParams.get('format') === 'yaml') {
        document.querySelector('#formatYaml').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    } else {
        document.querySelector('#formatJson').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    }

    window.addNoErrors = function () {
        const problems = document.getElementById('problems');
        const wrapper = document.createElement('div');
        wrapper.setAttribute('role', 'button');
        const text = document.createElement('div');
        wrapper.classList.add('problem');
        text.classList.add('problem-text');
        text.textContent = 'No errors! :)';
        wrapper.append(text);
        problems.append(wrapper);
    }

    window.canSave = <%= canSave %>;
    window.isGuest = false;

    if (searchParams.get('subreddit') === null) {
        document.querySelector('#saveTip').style.display = 'none';
    } else {
        document.querySelector('#doSave').textContent = `Save to ${searchParams.get('subreddit')}`;
    }

    window.setSaveStatus = function () {
        if (window.canSave) {
            document.querySelector('#saveTip').classList.remove('has-tooltip');
            document.querySelector('#saveQuestionIcon').style.display = 'none';
            const saveLink = document.querySelector('#doSave');
            saveLink.classList.remove('isDisabled');
            saveLink.href = '#';
            if(window.isGuest && !saveLink.innerHTML.includes('guest')) {
                saveLink.innerHTML = `${saveLink.innerHTML} as Guest Mod`;
            }
            document.querySelector('#reason').style.display = 'initial';
        } else {
            document.querySelector('#saveTip').classList.add('has-tooltip');
            document.querySelector('#saveQuestionIcon').style.display = 'initial';
            const saveLink = document.querySelector('#doSave');
            saveLink.classList.add('isDisabled');
            saveLink.href = '';
            document.querySelector('#reason').style.display = 'none';
        }
    }

    window.setSaveStatus();

    window.creatingWikiPage = false;
    window.isCreatingWikiPage = (val) => {
        window.creatingWikiPage = val;
        if(val) {
            document.querySelector('#doSave').textContent = `Create config for ${searchParams.get('subreddit')}`;
            if(document.querySelector('#createPerm') === null) {
                const node = document.querySelector('#reauthPermissions');
                node.insertAdjacentHTML('beforeend', '<li id="createPerm"><span class="font-mono">modwiki</span> -- used to set config page visibility to mod-only upon creation</li>');
            }
            document.querySelector('#configPageActionType').textContent = 'create';
        } else {
            const node = document.querySelector('#createPerm');
            if(node !== null) {
                node.style ='display:none;';
            }
            document.querySelector('#doSave').textContent = `Save to ${searchParams.get('subreddit')}`;
            document.querySelector('#configPageActionType').textContent = 'save';
        }
    }

    //https://stackoverflow.com/a/61404006/1469797
    function onBeforeUnload(e) {
        if (window.dirty) {
            e.preventDefault();
            e.returnValue = '';
            return;
        }

        delete e['returnValue'];
    }

    window.addEventListener('beforeunload', onBeforeUnload);

    document.querySelector('#doAuthorize').addEventListener('click', (e) => {
        e.preventDefault();
        const scopes = ['wikiedit'];
        if(window.creatingWikiPage) {
            scopes.push('modwiki');
        }
        window.open(`${document.location.origin}/login?closeOnSuccess=true&scope=${scopes.join(',')}`, 'Re-authorize CM', 'popup=1');
    });
    document.querySelector('#doSave').addEventListener('click', (e) => {
        e.preventDefault();
        if (window.wikiLocation === undefined || window.wikiLocation === null || window.canSave === false) {
            return;
        }

        const payload = {
            location: window.wikiLocation,
            create: window.creatingWikiPage,
            data: window.ed.getModel().getValue(),
        };

        const reasonVal = document.querySelector('#reason').value;
        if(reasonVal.trim() !== '') {
            payload.reason = reasonVal;
        }

        fetch(window.isGuest ? `${document.location.origin}/api/config${document.location.search}` : `${document.location.origin}/config${document.location.search}`, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        }).then((resp) => {
            if (!resp.ok) {
                resp.text().then(data => {
                    document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                });
            } else {
                if(window.creatingWikiPage) {
                    window.isCreatingWikiPage(false);
                }

                document.querySelector('#reason').value = '';

                document.querySelector('#error').innerHTML = `Wiki saved!`;
                window.dirty = false;
                setTimeout(() => {
                    document.querySelector('#error').innerHTML = ``;
                }, 3000);
            }
        })
    });
</script>
<script defer="defer" src="/public/yaml/entry.js"></script>
<script>
    const GIST_RAW_REGEX = new RegExp(/.*gist\.github\.com\/(.+)\/(.+)\/raw\/.+/i)
    // match[1] = username
    // match[2] = gistId
    // match[3] = filename (optional)
    const gistReg = new RegExp(/.*gist\.github\.com\/(.+)\/([^#\/]+)(?:#file-(.+))?/i)
    const blobReg = new RegExp(/.*github.com\/(.+)\/(.+)\/blob\/(.+)/i);

    const normalizeGistFileKey = (val) => val.replaceAll(/[^\w\d]/g, '').toLowerCase().trim();

    function getPayloadUrl(url) {
        console.debug(`Attempting to detect resolvable URL for ${url}`);
        let match = url.match(GIST_RAW_REGEX);
        if(match !== null) {
            return new Promise((resolve, reject) => {
                // need to use CDN url or else we get a CORS policy error
                resolve(url.replace('gist.github.com', 'gist.githubusercontent.com'));
            })
        } else {
            match = url.match(gistReg);
            if (match !== null) {
                const gistApiUrl = `https://api.github.com/gists/${match[2]}`;
                console.debug(`Looks like a non-raw gist URL! Trying to resolve ${gistApiUrl}`);

                return new Promise((resolve, reject) => {
                    fetch(gistApiUrl).then((resp) => {
                        if (!resp.ok) {
                            console.error('Response was not OK from Gist API');
                            resolve(url);
                        } else {
                            resp.json().then((data) => {
                                // get first found file
                                const fileKeys = Object.keys(data.files);
                                if (fileKeys.length === 0) {
                                    console.error(`No files found in gist!`);
                                } else {
                                    let fileKey = fileKeys[0];
                                    if (fileKeys.length > 1) {
                                        if(match[3] !== undefined) {
                                            //const normalizedFileName = normalizeGistFileKey(match.named.fileName.replace('/^file-/', ''));
                                            const normalizedFileName = normalizeGistFileKey(match[3]);
                                            const matchingKey = fileKeys.find(x => normalizeGistFileKey(x) === normalizedFileName);
                                            if(matchingKey === undefined) {
                                                console.error(`Found Gist ${match[2]} but it did not contain a file named ${match[3]}`);
                                            }
                                            fileKey = matchingKey;
                                        } else {
                                            console.warn(`More than one file found in gist but URL did not specify a filename! Using first found: ${fileKey}`);
                                        }
                                    }
                                    const rawUrl = data.files[fileKey].raw_url;
                                    console.debug(`Resolving raw gist url for file found (${fileKey}) to ${rawUrl}`);
                                    resolve(rawUrl);
                                }
                            });
                        }
                    })
                });
            }
        }

        match = url.match(blobReg);
        if(match !== null) {
            const rawUrl = `https://raw.githubusercontent.com/${match[1]}/${match[2]}/${match[3]}`
            console.debug(`Looks like a single file github URL! Resolving to ${rawUrl}`);
            return new Promise((resolve, reject) => resolve(rawUrl));
        }

        console.debug('Resolving with original URL');
        return new Promise((resolve, reject) => resolve(url));
    }

    window.addEventListener('load', function () {

        var searchParams = new URLSearchParams(window.location.search);
        let isSubreddit = false;
        let dlUrl = searchParams.get('url');
        if (dlUrl === null && searchParams.get('subreddit') !== null) {
            isSubreddit = true;
            dlUrl = `${document.location.origin}/api/config${document.location.search}`
        }

        let currentSchema = searchParams.get('schema') === 'operator' ? 'app' : 'bot',
            currentFormat = searchParams.get('format') === 'yaml' ? 'yaml' : 'json';

        const preamble = currentFormat === 'yaml' ? [
            '# Edit, or copy-paste, your configuration here to get',
            '# formatting, YAML syntax, and annotated properties'
        ] : [
            '// Edit, or copy-paste, your configuration here to get',
            '// formatting, JSON syntax, and annotated properties'
        ];

        function getFileName() {
            return `${currentSchema}.${currentFormat}`;
        }

        if (dlUrl !== null) {
            // @ts-ignore
            document.querySelector('#configUrl').value = dlUrl;
            getPayloadUrl(dlUrl).then((url) => {
                fetch(url).then((resp) => {
                    if (!resp.ok) {
                        resp.text().then(data => {
                            if(isSubreddit && data.includes('PAGE_NOT_CREATED')) {
                                window.isCreatingWikiPage(true);
                                window.ed.getModel().setValue(preamble.join('\r\n'))
                            } else {
                                document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                            }
                        });
                    } else {
                        if(isSubreddit) {
                            window.isCreatingWikiPage(false);
                        }
                        resp.text().then(data => {
                            const oldModel = window.ed.getModel();
                            oldModel.dispose();
                            // @ts-ignore
                            const newModel = window.meditor.createModel('', currentFormat, window.muri.parse(getFileName()));
                            window.ed.setModel(newModel);
                            window.ed.getModel().setValue(data);
                            newModel.onDidChangeContent((e) => {
                                window.dirty = true;
                            });
                            window.dirty = false;
                        })
                    }
                });
            })
            if (searchParams.get('subreddit') !== null) {
                const wikiLocationUrl = `${document.location.origin}/api/config/location${document.location.search}`
                fetch(wikiLocationUrl).then((resp) => {
                    if (!resp.ok) {
                        resp.text().then(data => {
                            document.querySelector('#error').innerHTML = `Error occurred while fetching wiki location => ${data}`
                        });
                    } else {
                        resp.text().then(data => {
                            window.wikiLocation = data;
                        });
                        fetch(`${document.location.origin}/guest${document.location.search}`).then((resp) => {
                            if(resp.ok) {
                                window.canSave = true;
                                window.isGuest = true;
                                window.setSaveStatus();
                            }
                        }).catch((e) => {
                            // do nothing, not a guest
                        })

                    }
                });
            }
        } else {
            const oldModel = window.ed.getModel();
            oldModel.dispose();
            // @ts-ignore
            const newModel = window.meditor.createModel(preamble.join('\r\n'), currentFormat, window.muri.parse(getFileName()));
            window.ed.setModel(newModel);
            newModel.onDidChangeContent((e) => {
                window.dirty = true;
            });
            window.dirty = false;
        }

        document.querySelector('#loadConfig').addEventListener('click', (e) => {
            e.preventDefault();
            // @ts-ignore
            const newUrl = document.querySelector('#configUrl').value;
            getPayloadUrl(newUrl).then((url) => {
                fetch(url).then((resp) => {
                    if (!resp.ok) {
                        resp.text().then(data => {
                            document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                        });
                    } else {
                        var sp = new URLSearchParams();
                        // @ts-ignore
                        sp.set('schema', currentSchema === 'app' ? 'operator' : 'bot');
                        sp.set('format', currentFormat);
                        sp.set('url', newUrl);
                        history.pushState(null, '', `${window.location.pathname}?${sp.toString()}`);
                        resp.text().then(data => {
                            const oldModel = window.ed.getModel();
                            oldModel.dispose();
                            // @ts-ignore
                            const newModel = window.meditor.createModel('', currentFormat, window.muri.parse(getFileName()));
                            window.ed.setModel(newModel);
                            window.ed.getModel().setValue(data);
                            newModel.onDidChangeContent((e) => {
                                window.dirty = true;
                            });
                            window.dirty = false;
                        })
                    }
                });
            });
        });

        document.querySelectorAll('.schemaType').forEach(el => {
            el.addEventListener('click', (e) => {
                document.querySelectorAll('.schemaType').forEach(el => {
                    el.classList.remove('font-bold', 'no-underline', 'pointer-events-none');
                })
                if (e.target.dataset.schema === 'operator') {
                    currentSchema = 'app';
                    window.schemaType = 'operator';
                    window.schemaFile = 'OperatorConfig.json';
                    document.querySelector('#operatorSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                } else {
                    currentSchema = 'bot';
                    document.querySelector('#subredditSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                    window.schemaType = 'subreddit';
                    window.schemaFile = 'App.json';
                }

                var searchParams = new URLSearchParams(window.location.search);
                searchParams.set('schema', currentSchema === 'app' ? 'operator' : 'bot');
                history.pushState(null, '', `${window.location.pathname}?${searchParams.toString()}`);
                const oldModel = window.ed.getModel();
                const val = oldModel.getValue();
                oldModel.dispose();
                const newModel = window.meditor.createModel('', currentFormat, window.muri.parse(getFileName()));
                window.ed.setModel(newModel);
                window.ed.getModel().setValue(val);
                newModel.onDidChangeContent((e) => {
                    window.dirty = true;
                });
                window.dirty = false;
            })
        });

        document.querySelectorAll('.formatType').forEach(el => {
            el.addEventListener('click', (e) => {
                document.querySelectorAll('.formatType').forEach(el => {
                    el.classList.remove('font-bold', 'no-underline', 'pointer-events-none');
                });

                if (e.target.dataset.format === 'yaml') {
                    currentFormat = 'yaml';
                    document.querySelector('#formatYaml').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                } else {
                    currentFormat = 'json';
                    document.querySelector('#formatJson').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                }

                var searchParams = new URLSearchParams(window.location.search);
                searchParams.set('format', e.target.dataset.format);
                history.pushState(null, '', `${window.location.pathname}?${searchParams.toString()}`);

                const oldModel = window.ed.getModel();
                const val = oldModel.getValue();
                oldModel.dispose();
                const newModel = window.meditor.createModel('', currentFormat, window.muri.parse(getFileName()));
                window.ed.setModel(newModel);
                window.ed.getModel().setValue(val);
                newModel.onDidChangeContent((e) => {
                    window.dirty = true;
                });
                window.dirty = false;
            })
        });

        window.addEventListener('load', function () {

            const markers = window.meditor.getModelMarkers();
            if (markers.length === 0) {
                window.addNoErrors();
            }

            window.meditor.onDidChangeMarkers(([resource]) => {

                const markers = window.meditor.getModelMarkers({resource});
                if (markers.length === 0) {
                    window.addNoErrors();
                }
            });
        });
    });
</script>
<script id="iojs" src="https://cdn.socket.io/4.1.2/socket.io.min.js" integrity="sha384-toS6mmwu70G0fw54EGlWWeA4z3dyJ+dlXBtSURSKN4vyRFOcxd3Bzjj/AoOwY+Rg" crossorigin="anonymous"></script>
<script>
    window.addEventListener('load', function () {
        let socket = io({
            reconnectionAttempts: 5, // bail after 5 attempts
        });
        socket.on("connect", () => {
            socket.on("authStatus", data => {
                console.log(data);
                window.canSave = data.canSaveWiki;
                window.setSaveStatus();
            });
        });
    });
</script>
</body>
</html>
